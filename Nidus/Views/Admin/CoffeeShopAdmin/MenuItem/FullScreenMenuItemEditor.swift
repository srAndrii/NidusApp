//
//  FullScreenMenuItemEditor.swift
//  Nidus
//
//  Created by Andrii Liakhovych on 3/29/25.
//

import SwiftUI

struct FullScreenMenuItemEditor: View {
    @Environment(\.presentationMode) var presentationMode
    
    // –ó–æ–≤–Ω—ñ—à–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    private let menuGroup: MenuGroup
    private let menuItem: MenuItem
    @ObservedObject private var menuItemsViewModel: MenuItemsViewModel
    
    // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω
    @StateObject private var editorViewModel: MenuItemEditorViewModel
    @State private var showImagePicker = false
    @State private var showImagePickerDialog = false
    @State private var sourceType: UIImagePickerController.SourceType = .photoLibrary
    @State private var isSaving = false
    
    init(viewModel: MenuItemsViewModel, menuGroup: MenuGroup, menuItem: MenuItem) {
        self.menuItemsViewModel = viewModel
        self.menuGroup = menuGroup
        self.menuItem = menuItem
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ StateObject –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
        _editorViewModel = StateObject(wrappedValue: MenuItemEditorViewModel(from: menuItem))
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–∞–º–∏
            Picker("", selection: $editorViewModel.selectedTab) {
                Text("–û—Å–Ω–æ–≤–Ω–µ").tag(0)
                Text("–ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è").tag(1)
                Text("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è").tag(2)
            }
            .pickerStyle(SegmentedPickerStyle())
            .padding(.horizontal)
            .padding(.top)
            
            ScrollView {
                VStack(spacing: 16) {
                    // –í–º—ñ—Å—Ç –≤–∫–ª–∞–¥–æ–∫
                    if editorViewModel.selectedTab == 0 {
                        // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                        basicInfoSection
                    } else if editorViewModel.selectedTab == 1 {
                        // –ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è
                        MenuItemCustomizationEditor(viewModel: editorViewModel)
                    } else {
                        // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        imageSection
                    }
                    
                    // –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                    Button(action: updateMenuItem) {
                        if isSaving {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        } else {
                            Text("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏")
                                .font(.headline)
                                .foregroundColor(.white)
                        }
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 16)
                    .background(editorViewModel.name.isEmpty || editorViewModel.price.isEmpty ? Color.gray : Color("primary"))
                    .foregroundColor(.white)
                    .cornerRadius(12)
                    .padding(.horizontal)
                    .padding(.bottom, 20)
                    .disabled(editorViewModel.name.isEmpty || editorViewModel.price.isEmpty || isSaving)
                    
                    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
                    if let error = editorViewModel.error {
                        Text(error)
                            .foregroundColor(.red)
                            .padding()
                            .multilineTextAlignment(.center)
                    }
                }
                .padding(.vertical)
            }
        }
        .navigationTitle("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è \(menuItem.name)")
        .navigationBarTitleDisplayMode(.inline)
        .sheet(isPresented: $showImagePicker) {
            ImagePickerView(
                selectedImage: $editorViewModel.selectedImage,
                isPresented: $showImagePicker,
                sourceType: sourceType
            )
        }
        .overlay(
            Group {
                if showImagePickerDialog {
                    ImagePickerDialog(
                        isPresented: $showImagePickerDialog,
                        showImagePicker: $showImagePicker,
                        sourceType: $sourceType
                    )
                }
            }
        )
    }
    
    // MARK: - UI Sections
    
    private var basicInfoSection: some View {
        VStack(spacing: 16) {
            CustomTextField(
                iconName: "cup.and.saucer",
                placeholder: "–ù–∞–∑–≤–∞",
                text: $editorViewModel.name
            )
            .padding(.horizontal)
            
            CustomTextField(
                iconName: "hryvniasign.circle",
                placeholder: "–¶—ñ–Ω–∞ (‚Ç¥)",
                text: $editorViewModel.price,
                keyboardType: .decimalPad
            )
            .padding(.horizontal)
            
            CustomTextField(
                iconName: "text.alignleft",
                placeholder: "–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
                text: $editorViewModel.description
            )
            .padding(.horizontal)
            
            // –ü–µ—Ä–µ–º–∏–∫–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
            HStack {
                Text("–î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
                    .foregroundColor(Color("primaryText"))
                
                Spacer()
                
                Toggle("", isOn: $editorViewModel.isAvailable)
                    .labelsHidden()
            }
            .padding(.horizontal)
        }
        .padding()
        .background(Color("cardColor"))
        .cornerRadius(12)
        .padding(.horizontal)
    }
    
    private var imageSection: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é")
                .font(.subheadline)
                .foregroundColor(Color("secondaryText"))
                .padding(.horizontal)
            
            ZStack {
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color("inputField"))
                    .frame(height: 200)
                
                if let selectedImage = editorViewModel.selectedImage {
                    Image(uiImage: selectedImage)
                        .resizable()
                        .scaledToFit()
                        .frame(height: 200)
                        .cornerRadius(12)
                } else if let imageUrl = editorViewModel.imageUrl, let url = URL(string: imageUrl) {
                    AsyncImage(url: url) { phase in
                        switch phase {
                        case .success(let image):
                            image
                                .resizable()
                                .scaledToFit()
                                .frame(height: 200)
                                .cornerRadius(12)
                        case .failure(_), .empty:
                            Image(systemName: "photo")
                                .font(.system(size: 40))
                                .foregroundColor(Color("secondaryText"))
                        @unknown default:
                            EmptyView()
                        }
                    }
                } else {
                    VStack {
                        Image(systemName: "photo")
                            .font(.system(size: 40))
                            .foregroundColor(Color("secondaryText"))
                        Text("–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                            .foregroundColor(Color("secondaryText"))
                    }
                }
            }
            .padding(.horizontal)
            
            Button(action: { showImagePickerDialog = true }) {
                HStack {
                    Image(systemName: "photo.on.rectangle.angled")
                    Text("–ó–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                }
                .foregroundColor(.white)
                .padding(.vertical, 12)
                .frame(maxWidth: .infinity)
                .background(Color("primary"))
                .cornerRadius(8)
            }
            .padding(.horizontal)
        }
        .padding()
        .background(Color("cardColor"))
        .cornerRadius(12)
        .padding(.horizontal)
    }
    
    // MARK: - Actions
    
    private func updateMenuItem() {
        guard let updatedMenuItem = editorViewModel.toMenuItem(groupId: menuGroup.id, itemId: menuItem.id) else {
            editorViewModel.error = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"
            return
        }
        
        isSaving = true
        
        Task {
            do {
                // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                var updates: [String: Any] = [
                    "name": updatedMenuItem.name,
                    "price": updatedMenuItem.price,
                    "isAvailable": updatedMenuItem.isAvailable
                ]
                
                // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É
                if let description = updatedMenuItem.description {
                    updates["description"] = description
                } else {
                    updates["description"] = NSNull()
                }
                
                // –û–±—Ä–æ–±–∫–∞ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó
                if editorViewModel.isCustomizable {
                    updates["ingredients"] = updatedMenuItem.ingredients
                    updates["customizationOptions"] = updatedMenuItem.customizationOptions
                    
                    print("üöÄ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó –≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
                    print("üöÄ –û–ø—Ü—ñ—ó: \(editorViewModel.customizationOptions.count)")
                    
                    for (i, option) in editorViewModel.customizationOptions.enumerated() {
                        print("üöÄ –û–ø—Ü—ñ—è \(i): \(option.name), –≤–∏–±–æ—Ä—ñ–≤: \(option.choices.count)")
                        for (j, choice) in option.choices.enumerated() {
                            print("üöÄ -- –í–∏–±—ñ—Ä \(j): \(choice.name)")
                        }
                    }
                } else {
                    updates["ingredients"] = NSNull()
                    updates["customizationOptions"] = NSNull()
                }
                
                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                let updatedItem = try await menuItemsViewModel.updateMenuItem(
                    groupId: menuGroup.id,
                    itemId: menuItem.id,
                    updates: updates
                )
                
                print("‚úì –ü—É–Ω–∫—Ç –º–µ–Ω—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–±—Ä–∞–Ω–µ
                if let selectedImage = editorViewModel.selectedImage {
                    if let compressedImageData = NetworkService.shared.compressImage(selectedImage, format: .jpeg, compressionQuality: 0.7) {
                        let uploadRequest = ImageUploadRequest(
                            imageData: compressedImageData,
                            fileName: "menu_item_\(menuItem.id).jpg",
                            mimeType: "image/jpeg"
                        )
                        
                        try await menuItemsViewModel.uploadMenuItemImage(
                            groupId: menuGroup.id,
                            itemId: menuItem.id,
                            imageRequest: uploadRequest
                        )
                        
                        print("‚úì –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
                    }
                }
                
                // –ü–æ–∫–∞–∑—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
                menuItemsViewModel.showSuccessMessage("–ü—É–Ω–∫—Ç –º–µ–Ω—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                await menuItemsViewModel.loadMenuItems(groupId: menuGroup.id)
                
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥
                presentationMode.wrappedValue.dismiss()
                
            } catch {
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é: \(error)")
                editorViewModel.error = error.localizedDescription
            }
            
            isSaving = false
        }
    }
}
