import SwiftUI
import Kingfisher

struct CoffeeShopDetailView: View {
    // MARK: - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    let coffeeShop: CoffeeShop
    @StateObject private var viewModel = CoffeeShopDetailViewModel(coffeeShopRepository: DIContainer.shared.coffeeShopRepository)
    @Environment(\.presentationMode) var presentationMode
    @State private var selectedCategory: String? = nil
    @Environment(\.colorScheme) private var colorScheme
    
    // MARK: - View
    var body: some View {
        ZStack(alignment: .topLeading) {
            // –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if #available(iOS 16.0, *) {
                // –î–ª—è iOS 16+ –∑ –Ω–æ–≤–æ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
                NavigationStack {
                    mainContentView
                        .navigationDestination(for: MenuItem.self) { item in
                            MenuItemDetailView(menuItem: item)
                        }
                }
                .navigationBarHidden(true)
            } else {
                // –î–ª—è iOS 15 —ñ —Ä–∞–Ω—ñ—à–µ
                mainContentView
            }
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - —Ç–µ–ø–µ—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º —ñ –∫–æ–ª—å–æ—Ä–æ–º
            BackButtonView(color: Color("primary"), backgroundColor: Color.black.opacity(0.4))
                .padding(.top, getSafeAreaInsets().top + 10)
                .padding(.leading, 16)
                .zIndex(2) // –©–æ–± –∫–Ω–æ–ø–∫–∞ –±—É–ª–∞ –Ω–∞–¥ –≤—Å—ñ–º–∞ —ñ–Ω—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
        }
        .edgesIgnoringSafeArea(.top)
        .navigationBarHidden(true)
        .onAppear {
            print("üì± CoffeeShopDetailView –∑'—è–≤–∏–≤—Å—è")
            viewModel.loadMenuGroups(coffeeShopId: coffeeShop.id)
        }
    }
    
    // MARK: - –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    private var mainContentView: some View {
        ZStack {
            // –ë–∞–∑–æ–≤–∏–π —Ñ–æ–Ω
            Group {
                if colorScheme == .light {
                    ZStack {
                        // –û—Å–Ω–æ–≤–Ω–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color("nidusCoolGray").opacity(0.9),
                                Color("nidusLightBlueGray").opacity(0.8)
                            ]),
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                        
                        // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä–∏
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color("nidusCoolGray").opacity(0.15),
                                Color.clear
                            ]),
                            startPoint: .top,
                            endPoint: .bottom
                        )
                        
                        // –¢–æ–Ω–∫–∏–π —à–∞—Ä –∫–æ–ª—å–æ—Ä—É –¥–ª—è –∑–∞—Ç—ñ–Ω–µ–Ω–Ω—è –≤ –∫—É—Ç–∞—Ö
                        RadialGradient(
                            gradient: Gradient(colors: [
                                Color.clear,
                                Color("nidusCoolGray").opacity(0.2)
                            ]),
                            center: .bottomTrailing,
                            startRadius: UIScreen.main.bounds.width * 0.2,
                            endRadius: UIScreen.main.bounds.width
                        )
                    }
                } else {
                    // –î–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–ª—ñ—Ä
                    Color("backgroundColor")
                }
            }
            .navigationBarHidden(true)
            .edgesIgnoringSafeArea(.all)
            
            // –õ–æ–≥–æ—Ç–∏–ø —è–∫ —Ñ–æ–Ω
            Image("Logo")
                .resizable()
                .renderingMode(.original)
                .aspectRatio(contentMode: .fit)
                .frame(width: UIScreen.main.bounds.width * 0.7)
                .saturation(1.5)
                .opacity(1)
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            
            // –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            ScrollView(showsIndicators: false) {
                VStack(spacing: 0) {
                    // –†–æ–∑—Ç—è–≥—É–≤–∞–Ω–∞ —à–∞–ø–∫–∞ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —ñ –Ω–∞–∫–ª–∞–¥–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
                    StretchableHeaderView(coffeeShop: coffeeShop)
                        .frame(height: 320)
                    
                    // –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    if viewModel.isLoading {
                        loadingView
                            .padding(.top, 20)
                    } else if viewModel.menuGroups.isEmpty {
                        emptyStateView
                            .padding(.top, 20)
                    } else {
                        // –§—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                        categoryFilterView()
                        
                        // –ú–µ–Ω—é –∫–∞–≤'—è—Ä–Ω—ñ - –≥—Ä—É–ø–∏ –º–µ–Ω—é –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
                        VStack(spacing: 24) {
                            ForEach(viewModel.menuGroups) { group in
                                if selectedCategory == nil || selectedCategory == group.id {
                                    MenuGroupView(group: group)
                                        .transition(.opacity)
                                }
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.top, 8)
                        .animation(.easeInOut(duration: 0.3), value: selectedCategory)
                    }
                }
            }
            .edgesIgnoringSafeArea(.top)
        }
    }
    
    // MARK: - –§—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    private func categoryFilterView() -> some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack(spacing: 10) {
                // –ö–Ω–æ–ø–∫–∞ "–í—Å—ñ"
                CategoryButton(
                    title: "–í—Å—ñ",
                    isSelected: selectedCategory == nil,
                    action: {
                        withAnimation {
                            selectedCategory = nil
                        }
                    }
                )
                
                // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                ForEach(viewModel.menuGroups) { group in
                    CategoryButton(
                        title: group.name,
                        isSelected: selectedCategory == group.id,
                        action: {
                            withAnimation {
                                selectedCategory = group.id
                            }
                        }
                    )
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 8)
        }
    }
    
    /// –ü–æ–∫–∞–∑—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    private var loadingView: some View {
        ProgressView("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é...")
            .font(.subheadline)
            .frame(maxWidth: .infinity, alignment: .center)
            .padding(.top, 40)
            .foregroundColor(Color("primaryText"))
    }
    
    /// –ü–æ–∫–∞–∑—É—î —Å—Ç–∞–Ω, –∫–æ–ª–∏ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö
    private var emptyStateView: some View {
        Text("–ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
            .font(.headline)
            .foregroundColor(Color("secondaryText"))
            .frame(maxWidth: .infinity, alignment: .center)
            .padding(.top, 40)
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –±–µ–∑–ø–µ—á–Ω–æ—ó –∑–æ–Ω–∏
    private func getSafeAreaInsets() -> EdgeInsets {
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ windows –¥–ª—è iOS 15+
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let window = windowScene.windows.first else {
            return EdgeInsets()
        }
        
        let safeAreaInsets = window.safeAreaInsets
        return EdgeInsets(
            top: safeAreaInsets.top,
            leading: safeAreaInsets.left,
            bottom: safeAreaInsets.bottom,
            trailing: safeAreaInsets.right
        )
    }
}

// MARK: - Preview
struct CoffeeShopDetailView_Previews: PreviewProvider {
    static var previews: some View {
        CoffeeShopDetailView(coffeeShop: MockData.singleCoffeeShop)
            .environmentObject(AuthenticationManager())
    }
}
