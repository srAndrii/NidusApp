import Foundation

// MARK: - Helper for backward compatibility

struct AnyCodingKey: CodingKey {
    var stringValue: String
    var intValue: Int?
    
    init(stringValue: String) {
        self.stringValue = stringValue
        self.intValue = nil
    }
    
    init(intValue: Int) {
        self.stringValue = "\(intValue)"
        self.intValue = intValue
    }
}

// MARK: - Order History Models

// –û—Å–Ω–æ–≤–Ω–∞ –º–æ–¥–µ–ª—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
struct OrderHistory: Codable, Identifiable {
    let id: String
    let orderNumber: String
    let status: OrderStatus
    let totalAmount: Double
    let coffeeShopId: String
    let coffeeShopName: String?
    let coffeeShop: CoffeeShopInfo?
    let isPaid: Bool
    let createdAt: String
    let completedAt: String?
    let items: [OrderHistoryItem]
    let statusHistory: [OrderStatusHistoryItem]
    let payment: OrderPaymentInfo?
    let cancelledBy: String?
    let cancellationActor: String?
    let cancellationReason: String?
    let comment: String?
    
    // MARK: - Initializers
    
    // –ó–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    init(
        id: String,
        orderNumber: String,
        status: OrderStatus,
        totalAmount: Double,
        coffeeShopId: String,
        coffeeShopName: String?,
        coffeeShop: CoffeeShopInfo? = nil,
        isPaid: Bool,
        createdAt: String,
        completedAt: String?,
        items: [OrderHistoryItem],
        statusHistory: [OrderStatusHistoryItem],
        payment: OrderPaymentInfo?,
        cancelledBy: String? = nil,
        cancellationActor: String? = nil,
        cancellationReason: String? = nil,
        comment: String? = nil
    ) {
        self.id = id
        self.orderNumber = orderNumber
        self.status = status
        self.totalAmount = totalAmount
        self.coffeeShopId = coffeeShopId
        self.coffeeShopName = coffeeShopName
        self.coffeeShop = coffeeShop
        self.isPaid = isPaid
        self.createdAt = createdAt
        self.completedAt = completedAt
        self.items = items
        self.statusHistory = statusHistory
        self.payment = payment
        self.cancelledBy = cancelledBy
        self.cancellationActor = cancellationActor
        self.cancellationReason = cancellationReason
        self.comment = comment
    }
    
    // MARK: - Custom Decoding
    enum CodingKeys: String, CodingKey {
        case id, orderNumber, status, totalAmount, coffeeShopId, coffeeShopName, coffeeShop, isPaid, createdAt, completedAt, items, statusHistory, payment, cancelledBy, cancellationActor, cancellationReason, comment
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        orderNumber = try container.decode(String.self, forKey: .orderNumber)
        status = try container.decode(OrderStatus.self, forKey: .status)
        coffeeShopId = try container.decode(String.self, forKey: .coffeeShopId)
        coffeeShopName = try container.decodeIfPresent(String.self, forKey: .coffeeShopName)
        coffeeShop = try container.decodeIfPresent(CoffeeShopInfo.self, forKey: .coffeeShop)
        isPaid = try container.decode(Bool.self, forKey: .isPaid)
        createdAt = try container.decode(String.self, forKey: .createdAt)
        completedAt = try container.decodeIfPresent(String.self, forKey: .completedAt)
        items = try container.decode([OrderHistoryItem].self, forKey: .items)
        statusHistory = try container.decode([OrderStatusHistoryItem].self, forKey: .statusHistory)
        payment = try container.decodeIfPresent(OrderPaymentInfo.self, forKey: .payment)
        cancelledBy = try container.decodeIfPresent(String.self, forKey: .cancelledBy)
        cancellationActor = try container.decodeIfPresent(String.self, forKey: .cancellationActor)
        cancellationReason = try container.decodeIfPresent(String.self, forKey: .cancellationReason)
        comment = try container.decodeIfPresent(String.self, forKey: .comment)
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ totalAmount —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let totalAmountString = try? container.decode(String.self, forKey: .totalAmount) {
            totalAmount = Double(totalAmountString) ?? 0.0
        } else {
            totalAmount = try container.decode(Double.self, forKey: .totalAmount)
        }
    }
}

// MARK: - Extensions for OrderHistory

extension OrderHistory {
    var formattedCreatedDate: String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "uk_UA")
        formatter.dateFormat = "d MMMM yyyy, HH:mm"
        
        if let date = ISO8601DateFormatter().date(from: createdAt) {
            return formatter.string(from: date)
        }
        
        // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        let iso8601Formatter = ISO8601DateFormatter()
        iso8601Formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        if let date = iso8601Formatter.date(from: createdAt) {
            return formatter.string(from: date)
        }
        
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫
        return createdAt
    }
    
    var statusDisplayName: String {
        return status.displayName
    }
    
    var statusColor: String {
        return status.color
    }
    
    var displayCoffeeShopName: String {
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∑ –æ–±'—î–∫—Ç–∞ coffeeShop
        if let coffeeShop = coffeeShop {
            return coffeeShop.name
        }
        // –Ø–∫—â–æ –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ coffeeShopName
        if let name = coffeeShopName {
            return name
        }
        // –Ø–∫—â–æ —ñ —Ü–µ –Ω–µ–º–∞—î, –ø—Ä–æ–±—É—î–º–æ –∫–µ—à –±–µ–∑–ø–µ—á–Ω–æ
        if let cachedName = CoffeeShopCache.shared.getCoffeeShopName(for: coffeeShopId) {
            return cachedName
        }
        return "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞–≤'—è—Ä–Ω—è"
    }
    
    var cancellationDisplayText: String? {
        print("üîç cancellationDisplayText –≤–∏–∫–ª–∏–∫–∞–Ω–æ:")
        print("   status: \(status.rawValue)")
        print("   cancellationActor: \(cancellationActor ?? "nil")")
        
        guard status == .cancelled else { 
            print("   ‚ùå status –Ω–µ —î cancelled")
            return nil 
        }
        
        if let actor = cancellationActor {
            print("   ‚úÖ cancellationActor –∑–Ω–∞–π–¥–µ–Ω–æ: \(actor)")
            switch actor {
            case "customer":
                let result = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ö–ª—ñ—î–Ω—Ç–æ–º"
                print("   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
                return result
            case "coffee_shop":
                let result = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ó–∞–∫–ª–∞–¥–æ–º"
                print("   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
                return result
            case "admin":
                let result = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                print("   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
                return result
            default:
                let result = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
                print("   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç (default): \(result)")
                return result
            }
        }
        
        print("   ‚ùå cancellationActor –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return nil
    }
    
    var cancellationComment: String? {
        print("üîç cancellationComment –≤–∏–∫–ª–∏–∫–∞–Ω–æ:")
        print("   status: \(status.rawValue)")
        print("   cancellationReason: \(cancellationReason ?? "nil")")
        print("   comment: \(comment ?? "nil")")
        
        guard status == .cancelled else { 
            print("   ‚ùå status –Ω–µ —î cancelled")
            return nil 
        }
        
        // NEW: –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é –±–µ–∫–µ–Ω–¥—É
        // 1. –ü–†–Ü–û–†–ò–¢–ï–¢: cancellationReason (—è–∫—â–æ —î)
        if let reason = cancellationReason, !reason.isEmpty {
            // –í–∏–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            let standardMessages = [
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–∞–≤'—è—Ä–Ω–µ—é",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–∫–ª–∞–¥–æ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            ]
            
            if !standardMessages.contains(reason) {
                print("   ‚úÖ –ü–†–Ü–û–†–ò–¢–ï–¢: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π cancellationReason: \(reason)")
                return reason
            } else {
                print("   ‚ö†Ô∏è cancellationReason —î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: \(reason)")
            }
        }
        
        // 2. –ó–ê–ü–ê–°–ù–ò–ô –í–ê–†–Ü–ê–ù–¢: comment –ø–æ–ª–µ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
        if let webSocketComment = comment, !webSocketComment.isEmpty {
            // –í–∏–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            let standardMessages = [
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–∞–≤'—è—Ä–Ω–µ—é",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–∫–ª–∞–¥–æ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            ]
            
            if !standardMessages.contains(webSocketComment) {
                print("   ‚úÖ –ó–ê–ü–ê–°–ù–ò–ô: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π comment: \(webSocketComment)")
                return webSocketComment
            } else {
                print("   ‚ö†Ô∏è comment —î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: \(webSocketComment)")
            }
        }
        
        // 3. –Ü–°–¢–û–†–Ü–Ø –°–¢–ê–¢–£–°–Ü–í: –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∑–∞–ø–∏—Å—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–∞—Ç—É—Å—ñ–≤
        if let lastCancelledItem = statusHistory.last(where: { $0.status == .cancelled }),
           let historyComment = lastCancelledItem.comment,
           !historyComment.isEmpty {
            // –¢–∞–∫–æ–∂ –≤–∏–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
            let standardHistoryMessages = [
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–∞–≤'—è—Ä–Ω–µ—é", 
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–∫–ª–∞–¥–æ–º",
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            ]
            
            if !standardHistoryMessages.contains(historyComment) {
                print("   ‚úÖ –Ü–°–¢–û–†–Ü–Ø: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ —ñ—Å—Ç–æ—Ä—ñ—ó: \(historyComment)")
                return historyComment
            } else {
                print("   ‚ö†Ô∏è –ö–æ–º–µ–Ω—Ç–∞—Ä –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º: \(historyComment)")
            }
        } else {
            print("   ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ cancelled –≤ statusHistory")
        }
        
        print("   ‚ùå cancellationComment –ø–æ–≤–µ—Ä—Ç–∞—î nil")
        return nil
    }
    
    // NEW: Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
    func getCancellationMessage(from webSocketData: Any? = nil) -> String? {
        guard status == .cancelled else { return nil }
        
        // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –∑ WebSocket orderCancelled –ø–æ–¥—ñ—ó
        if let cancellationData = webSocketData as? OrderWebSocketManager.OrderCancellationData {
            // 1. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: cancellationReason
            if let reason = cancellationData.cancellationReason, !reason.isEmpty {
                return reason
            }
            
            // 2. –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: comment
            if let comment = cancellationData.comment, !comment.isEmpty {
                return comment
            }
        }
        
        // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –∑ WebSocket orderStatusUpdated –ø–æ–¥—ñ—ó
        if let statusData = webSocketData as? OrderWebSocketManager.OrderStatusUpdateData {
            // 1. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: cancellationReason
            if let reason = statusData.cancellationReason, !reason.isEmpty {
                return reason
            }
            
            // 2. staffComment (—Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—É)
            if let staffComment = statusData.staffComment, !staffComment.isEmpty {
                return staffComment
            }
            
            // 3. –ó–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä
            if let comment = statusData.comment, !comment.isEmpty {
                return comment
            }
        }
        
        // Fallback –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –ª–æ–≥—ñ–∫–∏
        return cancellationComment
    }
}

// MARK: - Order History Item

struct OrderHistoryItem: Codable, Identifiable {
    let id: String
    let name: String
    let price: Double
    let basePrice: Double
    let finalPrice: Double
    let quantity: Int
    let customization: OrderItemCustomization?
    let customizationSummary: String?
    let customizationDetails: CustomizationDetails?
    let sizeName: String?
    let sizeAdditionalPrice: Double?
    
    // MARK: - Initializers
    
    // –ó–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    init(
        id: String,
        name: String,
        price: Double,
        basePrice: Double,
        finalPrice: Double,
        quantity: Int,
        customization: OrderItemCustomization?,
        customizationSummary: String? = nil,
        customizationDetails: CustomizationDetails? = nil,
        sizeName: String?,
        sizeAdditionalPrice: Double? = nil
    ) {
        self.id = id
        self.name = name
        self.price = price
        self.basePrice = basePrice
        self.finalPrice = finalPrice
        self.quantity = quantity
        self.customization = customization
        self.customizationSummary = customizationSummary
        self.customizationDetails = customizationDetails
        self.sizeName = sizeName
        self.sizeAdditionalPrice = sizeAdditionalPrice
    }
    
    // MARK: - Custom Decoding
    enum CodingKeys: String, CodingKey {
        case id, name, price, basePrice, finalPrice, quantity, customization, customizationSummary, customizationDetails, sizeName, sizeAdditionalPrice
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        name = try container.decode(String.self, forKey: .name)
        quantity = try container.decode(Int.self, forKey: .quantity)
        customization = try container.decodeIfPresent(OrderItemCustomization.self, forKey: .customization)
        customizationSummary = try container.decodeIfPresent(String.self, forKey: .customizationSummary)
        customizationDetails = try container.decodeIfPresent(CustomizationDetails.self, forKey: .customizationDetails)
        sizeName = try container.decodeIfPresent(String.self, forKey: .sizeName)
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ sizeAdditionalPrice —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let sizeAdditionalPriceString = try? container.decode(String.self, forKey: .sizeAdditionalPrice) {
            sizeAdditionalPrice = Double(sizeAdditionalPriceString)
        } else {
            sizeAdditionalPrice = try container.decodeIfPresent(Double.self, forKey: .sizeAdditionalPrice)
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ price —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let priceString = try? container.decode(String.self, forKey: .price) {
            price = Double(priceString) ?? 0.0
        } else {
            price = try container.decode(Double.self, forKey: .price)
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ basePrice —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let basePriceString = try? container.decode(String.self, forKey: .basePrice) {
            basePrice = Double(basePriceString) ?? 0.0
        } else {
            basePrice = try container.decode(Double.self, forKey: .basePrice)
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ finalPrice —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let finalPriceString = try? container.decode(String.self, forKey: .finalPrice) {
            finalPrice = Double(finalPriceString) ?? 0.0
        } else {
            finalPrice = try container.decode(Double.self, forKey: .finalPrice)
        }
    }
}

// MARK: - Extensions for OrderHistoryItem

extension OrderHistoryItem {
    var totalPrice: String {
        return String(format: "%.2f ‚Ç¥", finalPrice * Double(quantity))
    }
    
    var formattedPrice: String {
        return String(format: "%.2f ‚Ç¥", finalPrice)
    }
    
    var effectiveSizeAdditionalPrice: Double? {
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ sizeAdditionalPrice –∑ API
        if let apiPrice = sizeAdditionalPrice {
            return apiPrice
        }
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î, –ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∑ customization
        if let customization = customization,
           let sizeData = customization.selectedSizeData {
            return sizeData.additionalPrice
        }
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î, –ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∑ customizationDetails
        if let details = customizationDetails,
           let size = details.size {
            return size.additionalPrice
        }
        
        return nil
    }
    
    var displayCustomization: String? {
        if let customizationData = customizationDisplayData {
            return formatCustomizationDisplayData(customizationData)
        }
        
        // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ customization –æ–±'—î–∫—Ç
        if let customization = customization, customization.hasCustomizations {
            print("üîç OrderHistoryItem: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ customization.displayText")
            return customization.displayText
        }
        
        return nil
    }
    
    var customizationDisplayData: CustomizationDisplayData? {
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ customizationDetails –∑ —Ç–æ—á–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏ –∑ API
        if let details = customizationDetails {
            print("üîç OrderHistoryItem: –§–æ—Ä–º—É—î–º–æ –∑ item.customizationDetails (–Ω–æ–≤–∏–π API)")
            return formatCustomizationDetailsToDisplayData(details)
        }
        
        // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - customizationSummary –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
        if let summary = customizationSummary, !summary.isEmpty {
            print("üîç OrderHistoryItem: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ item.customizationSummary (legacy): \(summary)")
            return formatCustomizationSummary(summary)
        }
        
        return nil
    }
    
    private func formatCustomizationDisplayData(_ data: CustomizationDisplayData) -> String {
        var components: [String] = []
        
        // –ù–ï –¥–æ–¥–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤–∏—â–µ
        
        if !data.ingredients.isEmpty {
            components.append("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: \(data.ingredients.map { $0.displayText }.joined(separator: ", "))")
        }
        
        if !data.optionGroups.isEmpty {
            var optionStrings: [String] = []
            for (groupName, options) in data.optionGroups {
                let optionTexts = options.map { $0.displayText }.joined(separator: ", ")
                optionStrings.append("\(groupName): \(optionTexts)")
            }
            components.append("–û–ø—Ü—ñ—ó: \(optionStrings.joined(separator: "; "))")
        }
        
        return components.joined(separator: "\n")
    }
    
    private func formatCustomizationDetailsToDisplayData(_ details: CustomizationDetails) -> CustomizationDisplayData {
        var ingredients: [IngredientDisplayItem] = []
        var optionGroups: [String: [OptionDisplayItem]] = [:]
        
        print("üîç formatCustomizationDetailsToDisplayData: –û–±—Ä–æ–±–ª—è—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó")
        
        // Handle ingredients from new API format
        if let newIngredients = details.ingredients, !newIngredients.isEmpty {
            print("   - –ó–Ω–∞–π–¥–µ–Ω–æ \(newIngredients.count) —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ")
            for ingredient in newIngredients {
                let displayItem = IngredientDisplayItem(
                    name: ingredient.name,
                    quantity: ingredient.amount,
                    unit: ingredient.unit ?? "—à—Ç",
                    additionalPrice: ingredient.pricing?.totalPrice ?? 0.0
                )
                ingredients.append(displayItem)
                print("     - –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç: \(ingredient.name), –∫—ñ–ª—å–∫—ñ—Å—Ç—å: \(ingredient.amount), —Ü—ñ–Ω–∞: \(ingredient.pricing?.totalPrice ?? 0.0)")
            }
        }
        
        if let options = details.options, !options.isEmpty {
            print("   - –ó–Ω–∞–π–¥–µ–Ω–æ \(options.count) –æ–ø—Ü—ñ–π –≤ –¥–µ—Ç–∞–ª—è—Ö")
            
            for option in options {
                // Handle new API format with grouped options
                if let choices = option.choices, !choices.isEmpty {
                    let groupName = option.optionGroupName ?? "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó"
                    print("     - –ì—Ä—É–ø–∞ –æ–ø—Ü—ñ–π: \(groupName)")
                    
                    for choice in choices {
                        let optionItem = OptionDisplayItem(
                            name: choice.name,
                            quantity: choice.quantity ?? 1,
                            additionalPrice: choice.pricing?.totalPrice ?? 0.0
                        )
                        
                        print("       - –í–∏–±—ñ—Ä: \(choice.name), –∫—ñ–ª—å–∫—ñ—Å—Ç—å: \(choice.quantity ?? 1), —Ü—ñ–Ω–∞: \(choice.pricing?.totalPrice ?? 0.0)")
                        
                        if optionGroups[groupName] == nil {
                            optionGroups[groupName] = []
                        }
                        optionGroups[groupName]?.append(optionItem)
                    }
                } else if let optionName = option.name {
                    // Handle legacy API format
                    let optionItem = OptionDisplayItem(
                        name: optionName,
                        quantity: option.quantity ?? 1,
                        additionalPrice: option.totalPrice ?? 0.0
                    )
                    
                    print("     - –û–ø—Ü—ñ—è (legacy): \(optionName), –∫—ñ–ª—å–∫—ñ—Å—Ç—å: \(option.quantity ?? 1), —Ü—ñ–Ω–∞: \(option.totalPrice ?? 0.0)")
                    
                    let groupName = determineOptionGroupName(for: optionName)
                    
                    if optionGroups[groupName] == nil {
                        optionGroups[groupName] = []
                    }
                    optionGroups[groupName]?.append(optionItem)
                    print("     - –î–æ–¥–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ '\(groupName)'")
                }
            }
        }
        
        print("   ‚úÖ –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ –≥—Ä—É–ø –æ–ø—Ü—ñ–π: \(optionGroups.keys.joined(separator: ", "))")
        
        return CustomizationDisplayData(
            sizeInfo: nil, // –ù–ï –≤–∫–ª—é—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä
            ingredients: ingredients,
            optionGroups: optionGroups
        )
    }
    
    private func determineOptionGroupName(for optionName: String) -> String {
        // ‚úÖ –í–∏–∑–Ω–∞—á–∞—î–º–æ –≥—Ä—É–ø—É –æ–ø—Ü—ñ—ó –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é
        let lowercaseName = optionName.lowercased()
        
        if lowercaseName.contains("—Å–∏—Ä–æ–ø") || lowercaseName.contains("syrup") ||
           lowercaseName.contains("–∫–∞—Ä–∞–º–µ–ª") || lowercaseName.contains("–≤–∞–Ω—ñ–ª") ||
           lowercaseName.contains("–º–µ–¥") || lowercaseName.contains("—à–æ–∫–æ–ª–∞–¥") {
            return "–°–∏—Ä–æ–ø"
        }
        
        if lowercaseName.contains("–º–æ–ª–æ–∫") || lowercaseName.contains("milk") ||
           lowercaseName.contains("—Å–æ—î–≤") || lowercaseName.contains("–º–∏–≥–¥–∞–ª") ||
           lowercaseName.contains("–≤—ñ–≤—Å—è") || lowercaseName.contains("–∫–æ–∫–æ—Å") {
            return "–¢–∏–ø –º–æ–ª–æ–∫–∞"
        }
        
        if lowercaseName.contains("—Ç–æ–ø—ñ–Ω–≥") || lowercaseName.contains("topping") {
            return "–¢–æ–ø—ñ–Ω–≥–∏"
        }
        
        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        return "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó"
    }
    
    private func formatCustomizationSummary(_ summary: String) -> CustomizationDisplayData {
        // –†–æ–∑–±–∏—Ä–∞—î–º–æ summary —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ –π–æ–≥–æ –∫—Ä–∞—â–µ
        let parts = summary.components(separatedBy: " | ")
        
        var ingredients: [IngredientDisplayItem] = []
        var optionGroups: [String: [OptionDisplayItem]] = [:]
        
        for part in parts {
            let trimmedPart = part.trimmingCharacters(in: .whitespaces)
            
            if trimmedPart.hasPrefix("–†–æ–∑–º—ñ—Ä:") {
                // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤–∏—â–µ
                continue
            } else if trimmedPart.hasPrefix("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:") {
                let ingredientsPart = String(trimmedPart.dropFirst("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:".count)).trimmingCharacters(in: .whitespaces)
                let ingredientItems = ingredientsPart.components(separatedBy: ", ")
                
                for item in ingredientItems {
                    if let ingredient = parseIngredientItem(item) {
                        ingredients.append(ingredient)
                    }
                }
            } else if trimmedPart.hasPrefix("–û–ø—Ü—ñ—ó:") {
                let optionsPart = String(trimmedPart.dropFirst("–û–ø—Ü—ñ—ó:".count)).trimmingCharacters(in: .whitespaces)
                let optionItems = optionsPart.components(separatedBy: "; ")
                
                for item in optionItems {
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–±—Ä–æ–±–ª—è—î–º–æ –º–∞—Å–∏–≤ –æ–ø—Ü—ñ–π –∑–∞–º—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó
                    if let (groupName, options) = parseOptionItem(item) {
                        if optionGroups[groupName] == nil {
                            optionGroups[groupName] = []
                        }
                        // ‚úÖ –î–æ–¥–∞—î–º–æ –í–°–Ü –æ–ø—Ü—ñ—ó –∑ –≥—Ä—É–ø–∏ (–º–Ω–æ–∂–∏–Ω–Ω—ñ —Å–∏—Ä–æ–ø–∏)
                        optionGroups[groupName]?.append(contentsOf: options)
                    }
                }
            }
        }
        
        return CustomizationDisplayData(
            sizeInfo: nil, // –ù–ï –≤–∫–ª—é—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä
            ingredients: ingredients,
            optionGroups: optionGroups
        )
    }
    
    private func parseIngredientItem(_ item: String) -> IngredientDisplayItem? {
        // –ü–∞—Ä—Å–∏–º–æ —Ä—è–¥–æ–∫ —Ç–∏–ø—É "–ï—Å–ø—Ä–µ—Å–æ : 5–ø–æ—Ä—Ü—ñ—è" 
        let components = item.components(separatedBy: " : ")
        guard components.count >= 2 else { return nil }
        
        let name = components[0].trimmingCharacters(in: .whitespaces)
        let quantityAndPrice = components[1].trimmingCharacters(in: .whitespaces)
        
        // –í–∏—Ç—è–≥—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        let quantityPattern = "\\d+"
        let quantityMatch = quantityAndPrice.range(of: quantityPattern, options: .regularExpression)
        guard let quantityRange = quantityMatch else { return nil }
        
        let quantityString = String(quantityAndPrice[quantityRange])
        guard let quantity = Int(quantityString) else { return nil }
        
        // –í–∏—Ç—è–≥—É—î–º–æ –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—É
        let unitStart = quantityAndPrice.index(quantityRange.upperBound, offsetBy: 0)
        let unit = String(quantityAndPrice[unitStart...]).trimmingCharacters(in: .whitespaces)
        
        // –û–±—á–∏—Å–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–∞–≤–∏–ª
        let additionalPrice = calculateIngredientPrice(name: name, quantity: quantity)
        
        return IngredientDisplayItem(
            name: name,
            quantity: quantity,
            unit: unit,
            additionalPrice: additionalPrice
        )
    }
    
    private func calculateIngredientPrice(name: String, quantity: Int) -> Double {
        // –ü—Ä–∞–≤–∏–ª–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤
        let freeQuantity = 2 // –ü–µ—Ä—à—ñ 2 –ø–æ—Ä—Ü—ñ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ
        let paidQuantity = max(0, quantity - freeQuantity)
        
        // –¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤
        let pricePerUnit: Double
        if name.lowercased().contains("–µ—Å–ø—Ä–µ—Å–æ") || name.lowercased().contains("espresso") {
            pricePerUnit = 3.0 // 3 ‚Ç¥ –∑–∞ –ø–æ—Ä—Ü—ñ—é –µ—Å–ø—Ä–µ—Å–æ
        } else if name.lowercased().contains("—Ü—É–∫–æ—Ä") {
            pricePerUnit = 0.0 // –¶—É–∫–æ—Ä –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π
        } else {
            pricePerUnit = 1.0 // –Ü–Ω—à—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –ø–æ 1 ‚Ç¥
        }
        
        return pricePerUnit * Double(paidQuantity)
    }
    
    private func parseOptionItem(_ item: String) -> (String, [OptionDisplayItem])? {
        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–∞—Ä—Å–∏–º–æ —Ä—è–¥–∫–∏ –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏ —Ç–∏–ø—É "–°–∏—Ä–æ–ø: –ö–∞—Ä–∞–º–µ–ª—å x6, –í–∞–Ω—ñ–ª—å–Ω–∏–π x2, –ú–µ–¥ x1"
        let components = item.components(separatedBy: ": ")
        guard components.count >= 2 else { return nil }
        
        let groupName = components[0].trimmingCharacters(in: .whitespaces)
        let optionsInfo = components[1].trimmingCharacters(in: .whitespaces)
        
        print("üîç parseOptionItem: –ü–∞—Ä—Å–∏–º–æ –æ–ø—Ü—ñ—é '\(groupName)' –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏: '\(optionsInfo)'")
        
        // ‚úÖ –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫—ñ–ª—å–∫–∞ –æ–ø—Ü—ñ–π –∑–∞ –∫–æ–º–∞–º–∏: "–ö–∞—Ä–∞–º–µ–ª—å x6, –í–∞–Ω—ñ–ª—å–Ω–∏–π x2"
        let optionItems = optionsInfo.components(separatedBy: ", ")
        var options: [OptionDisplayItem] = []
        
        for optionItem in optionItems {
            if let option = parseSingleOptionItem(optionItem.trimmingCharacters(in: .whitespaces), groupName: groupName) {
                options.append(option)
                print("   ‚úÖ –î–æ–¥–∞–Ω–æ –æ–ø—Ü—ñ—é: \(option.name) x\(option.quantity) (+\(option.additionalPrice)‚Ç¥)")
            }
        }
        
        return options.isEmpty ? nil : (groupName, options)
    }
    
    private func parseSingleOptionItem(_ optionItem: String, groupName: String) -> OptionDisplayItem? {
        // –ü–∞—Ä—Å–∏–º–æ –æ–¥–Ω—É –æ–ø—Ü—ñ—é —Ç–∏–ø—É "–ö–∞—Ä–∞–º–µ–ª—å x6" –∞–±–æ "–í–∞–Ω—ñ–ª—å–Ω–∏–π"
        var optionName = optionItem
        var quantity = 1
        
        // –í–∏—Ç—è–≥—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (x6, x3 —Ç–æ—â–æ)
        let quantityPattern = "x(\\d+)"
        if let quantityMatch = optionItem.range(of: quantityPattern, options: .regularExpression) {
            let quantityString = String(optionItem[quantityMatch])
            let numberPattern = "\\d+"
            let numberMatch = quantityString.range(of: numberPattern, options: .regularExpression)
            if let numberRange = numberMatch {
                quantity = Int(String(quantityString[numberRange])) ?? 1
            }
            optionName = String(optionItem[..<quantityMatch.lowerBound]).trimmingCharacters(in: .whitespaces)
        }
        
        // –û–±—á–∏—Å–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –æ–ø—Ü—ñ—ó —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        let additionalPrice = calculateOptionPrice(groupName: groupName, optionName: optionName, quantity: quantity)
        
        return OptionDisplayItem(
            name: optionName,
            quantity: quantity,
            additionalPrice: additionalPrice
        )
    }
    
    private func calculateOptionPrice(groupName: String, optionName: String, quantity: Int) -> Double {
        // –ü—Ä–∞–≤–∏–ª–∞ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –æ–ø—Ü—ñ–π
        
        if groupName.lowercased().contains("—Ç–∏–ø –º–æ–ª–æ–∫–∞") {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –º–æ–ª–æ–∫–æ –∫–æ—à—Ç—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ
            if optionName.lowercased().contains("—Å–æ—î–≤–µ") || 
               optionName.lowercased().contains("–º–∏–≥–¥–∞–ª—å–Ω–µ") || 
               optionName.lowercased().contains("–≤—ñ–≤—Å—è–Ω–µ") {
                return 3.0 // +3 ‚Ç¥ –∑–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –º–æ–ª–æ–∫–æ
            }
            return 0.0 // –ó–≤–∏—á–∞–π–Ω–µ –º–æ–ª–æ–∫–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ
        }
        
        if groupName.lowercased().contains("—Å–∏—Ä–æ–ø") {
            // –î–ª—è —Å–∏—Ä–æ–ø—ñ–≤: –ø–µ—Ä—à—ñ 2 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ, —Ä–µ—à—Ç–∞ –ø–æ 1 ‚Ç¥
            let freeQuantity = 2
            let paidQuantity = max(0, quantity - freeQuantity)
            return 1.0 * Double(paidQuantity) // 1 ‚Ç¥ –∑–∞ –∫–æ–∂–Ω—É –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–æ—Ä—Ü—ñ—é —Å–∏—Ä–æ–ø—É
        }
        
        // –Ü–Ω—à—ñ –æ–ø—Ü—ñ—ó
        return 0.0
    }
    

    
    var hasCustomizations: Bool {
        return displayCustomization != nil
    }
}

// MARK: - Order Item Customization

struct OrderItemCustomization: Codable {
    let selectedIngredients: [String: Int]?
    let selectedOptions: [String: [OrderCustomizationChoice]]?
    let selectedSizeData: SelectedSizeData?
    let customizationDetails: CustomizationDetails?
    let customizationSummary: String?
    
    // –ó–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    init(
        selectedIngredients: [String: Int]? = nil,
        selectedOptions: [String: [OrderCustomizationChoice]]? = nil,
        selectedSizeData: SelectedSizeData? = nil,
        customizationDetails: CustomizationDetails? = nil,
        customizationSummary: String? = nil
    ) {
        self.selectedIngredients = selectedIngredients
        self.selectedOptions = selectedOptions
        self.selectedSizeData = selectedSizeData
        self.customizationDetails = customizationDetails
        self.customizationSummary = customizationSummary
    }
    
    // –ö–∞—Å—Ç–æ–º–Ω–∏–π –¥–µ–∫–æ–¥–µ—Ä –¥–ª—è –≥–Ω—É—á–∫–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ API
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        selectedIngredients = try container.decodeIfPresent([String: Int].self, forKey: .selectedIngredients)
        selectedOptions = try container.decodeIfPresent([String: [OrderCustomizationChoice]].self, forKey: .selectedOptions)
        selectedSizeData = try container.decodeIfPresent(SelectedSizeData.self, forKey: .selectedSizeData)
        customizationDetails = try container.decodeIfPresent(CustomizationDetails.self, forKey: .customizationDetails)
        customizationSummary = try container.decodeIfPresent(String.self, forKey: .customizationSummary)
    }
    
    enum CodingKeys: String, CodingKey {
        case selectedIngredients, selectedOptions, selectedSizeData, customizationDetails, customizationSummary
    }
}

// MARK: - Supporting Types

struct SelectedSizeData: Codable {
    let id: String
    let name: String?  // –ó—Ä–æ–±–∏–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º
    let additionalPrice: Double
    
    // –ö–∞—Å—Ç–æ–º–Ω–∏–π –¥–µ–∫–æ–¥–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ additionalPrice —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let priceString = try? container.decode(String.self, forKey: .additionalPrice) {
            additionalPrice = Double(priceString) ?? 0.0
        } else {
            additionalPrice = try container.decode(Double.self, forKey: .additionalPrice)
        }
    }
    
    enum CodingKeys: String, CodingKey {
        case id, name, additionalPrice
    }
}

struct OrderCustomizationChoice: Codable {
    let id: String
    let name: String?
    let additionalPrice: Double?
    let quantity: Int?
    
    // –ó–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    init(id: String, name: String?, additionalPrice: Double?, quantity: Int? = nil) {
        self.id = id
        self.name = name
        self.additionalPrice = additionalPrice
        self.quantity = quantity
    }
    
    enum CodingKeys: String, CodingKey {
        case id = "choiceId"
        case name
        case additionalPrice
        case quantity
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        // –ü—Ä–æ–±—É—î–º–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ id –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –∫–ª—é—á—ñ–≤
        if let choiceId = try? container.decode(String.self, forKey: .id) {
            id = choiceId
        } else if let container = try? decoder.singleValueContainer(),
                  let directId = try? container.decode(String.self) {
            id = directId
        } else {
            throw DecodingError.keyNotFound(CodingKeys.id, DecodingError.Context(
                codingPath: decoder.codingPath,
                debugDescription: "Unable to find id or choiceId"
            ))
        }
        
        name = try container.decodeIfPresent(String.self, forKey: .name)
        quantity = try container.decodeIfPresent(Int.self, forKey: .quantity)
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ additionalPrice —è–∫ —Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ
        if let priceString = try? container.decode(String.self, forKey: .additionalPrice) {
            additionalPrice = Double(priceString)
        } else {
            additionalPrice = try container.decodeIfPresent(Double.self, forKey: .additionalPrice)
        }
    }
}

// MARK: - Extensions for OrderItemCustomization

extension OrderItemCustomization {
    var hasCustomizations: Bool {
        let hasIngredients = selectedIngredients?.values.contains { $0 > 0 } == true
        let hasOptions = selectedOptions?.values.contains { !$0.isEmpty } == true
        let hasDetails = customizationDetails?.options?.isEmpty == false || customizationDetails?.size != nil
        return hasIngredients || hasOptions || hasDetails
    }
    
    var displayText: String {
        print("üîç OrderItemCustomization.displayText:")
        print("   - customizationSummary: \(customizationSummary ?? "nil")")
        print("   - customizationDetails: \(customizationDetails != nil ? "—î" : "nil")")
        print("   - selectedIngredients: \(selectedIngredients ?? [:])")
        print("   - selectedOptions: \(selectedOptions?.keys.joined(separator: ", ") ?? "nil")")
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≥–æ—Ç–æ–≤–∏–π summary –∑ API
        if let summary = customizationSummary, !summary.isEmpty {
            print("   ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ customizationSummary: \(summary)")
            return summary
        }
        
        // –Ø–∫—â–æ —î –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, —Ñ–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –Ω–µ—ó
        if let details = customizationDetails {
            print("   üîß –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ customizationDetails")
            var components: [String] = []
            
            // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä
            if let size = details.size {
                if size.additionalPrice > 0 {
                    components.append("–†–æ–∑–º—ñ—Ä: \(size.name) (+\(String(format: "%.2f", size.additionalPrice)) ‚Ç¥)")
                } else {
                    components.append("–†–æ–∑–º—ñ—Ä: \(size.name)")
                }
            }
            
            // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø—Ü—ñ—ó
            if let options = details.options, !options.isEmpty {
                var optionStrings: [String] = []
                for option in options {
                    // Handle new API format with grouped options
                    if let choices = option.choices, !choices.isEmpty {
                        for choice in choices {
                            let quantity = choice.quantity ?? 1
                            let totalPrice = choice.pricing?.totalPrice ?? 0.0
                            if quantity > 1 {
                                optionStrings.append("\(choice.name) x\(quantity) (+\(String(format: "%.2f", totalPrice)) ‚Ç¥)")
                            } else if totalPrice > 0 {
                                optionStrings.append("\(choice.name) (+\(String(format: "%.2f", totalPrice)) ‚Ç¥)")
                            } else {
                                optionStrings.append(choice.name)
                            }
                        }
                    } else if let optionName = option.name {
                        // Handle legacy API format
                        let quantity = option.quantity ?? 1
                        let totalPrice = option.totalPrice ?? 0.0
                        let price = option.price ?? 0.0
                        
                        if quantity > 1 {
                            optionStrings.append("\(optionName) x\(quantity) (+\(String(format: "%.2f", totalPrice)) ‚Ç¥)")
                        } else if price > 0 {
                            optionStrings.append("\(optionName) (+\(String(format: "%.2f", price)) ‚Ç¥)")
                        } else {
                            optionStrings.append(optionName)
                        }
                    }
                }
                if !optionStrings.isEmpty {
                    components.append("–û–ø—Ü—ñ—ó: \(optionStrings.joined(separator: "; "))")
                }
            }
            
            if !components.isEmpty {
                let result = components.joined(separator: "\n")
                print("   ‚úÖ –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ details: \(result)")
                return result
            }
        }
        
        print("   ‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç")
        // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∏ –≤ —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö
        var components: [String] = []
        
        // –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä, —è–∫—â–æ —î
        if let sizeData = selectedSizeData {
            if let sizeName = sizeData.name {
                if sizeData.additionalPrice > 0 {
                    components.append("–†–æ–∑–º—ñ—Ä: \(sizeName) (+\(String(format: "%.2f", sizeData.additionalPrice)) ‚Ç¥)")
                } else {
                    components.append("–†–æ–∑–º—ñ—Ä: \(sizeName)")
                }
            }
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
        if let ingredients = selectedIngredients, !ingredients.isEmpty {
            for (ingredientId, quantity) in ingredients where quantity > 0 {
                // –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞ –≤ –æ–ø—Ü—ñ—è—Ö
                var ingredientName: String?
                
                if let options = selectedOptions {
                    for (_, choices) in options {
                        for choice in choices {
                            if choice.id == ingredientId, let name = choice.name {
                                ingredientName = name
                                break
                            }
                        }
                        if ingredientName != nil { break }
                    }
                }
                
                                 if let name = ingredientName {
                     if quantity > 1 {
                         components.append("\(name) x\(quantity)")
                     } else {
                         components.append(name)
                     }
                 } else {
                     // –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É –≤ —Å–µ—Ä–≤—ñ—Å—ñ
                     if let serviceName = CustomizationNameService.shared.getIngredientName(for: ingredientId) {
                         if quantity > 1 {
                             components.append("\(serviceName) x\(quantity)")
                         } else {
                             components.append(serviceName)
                         }
                     } else {
                         // –ü–æ–∫–∞–∑—É—î–º–æ —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π ID –∑–∞–º—ñ—Å—Ç—å –ø–æ–≤–Ω–æ–≥–æ
                         let shortId = String(ingredientId.prefix(8))
                         components.append("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç (\(shortId)...): +\(quantity)")
                     }
                 }
            }
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–ø—Ü—ñ—ó
        if let options = selectedOptions, !options.isEmpty {
            for (_, choices) in options where !choices.isEmpty {
                for choice in choices {
                    if let name = choice.name {
                        if let quantity = choice.quantity, quantity > 1 {
                            if let price = choice.additionalPrice, price > 0 {
                                components.append("\(name) x\(quantity) (+\(String(format: "%.2f", price * Double(quantity))) ‚Ç¥)")
                            } else {
                                components.append("\(name) x\(quantity)")
                            }
                        } else {
                            if let price = choice.additionalPrice, price > 0 {
                                components.append("\(name) (+\(String(format: "%.2f", price)) ‚Ç¥)")
                            } else {
                                components.append(name)
                            }
                        }
                    } else {
                        // –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É –≤ —Å–µ—Ä–≤—ñ—Å—ñ
                        if let serviceName = CustomizationNameService.shared.getOptionName(for: choice.id) {
                            if let quantity = choice.quantity, quantity > 1 {
                                if let price = choice.additionalPrice, price > 0 {
                                    components.append("\(serviceName) x\(quantity) (+\(String(format: "%.2f", price * Double(quantity))) ‚Ç¥)")
                                } else {
                                    components.append("\(serviceName) x\(quantity)")
                                }
                            } else {
                                if let price = choice.additionalPrice, price > 0 {
                                    components.append("\(serviceName) (+\(String(format: "%.2f", price)) ‚Ç¥)")
                                } else {
                                    components.append(serviceName)
                                }
                            }
                        } else {
                            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π ID –∑–∞–º—ñ—Å—Ç—å –ø–æ–≤–Ω–æ–≥–æ
                            let shortId = String(choice.id.prefix(8))
                            components.append("–û–ø—Ü—ñ—è (\(shortId)...)")
                        }
                    }
                }
            }
        }
        
        if components.isEmpty {
            let result = "–ë–µ–∑ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ–π"
            print("   üìù –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
            return result
        }
        
        // –ì—Ä—É–ø—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑–∞ —Ç–∏–ø–∞–º–∏
        var sizeComponents: [String] = []
        var ingredientComponents: [String] = []
        var optionComponents: [String] = []
        
        for component in components {
            if component.hasPrefix("–†–æ–∑–º—ñ—Ä:") {
                sizeComponents.append(component)
            } else if component.contains("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç") || component.contains("x") {
                ingredientComponents.append(component)
            } else {
                optionComponents.append(component)
            }
        }
        
        var formattedComponents: [String] = []
        
        if !sizeComponents.isEmpty {
            formattedComponents.append(contentsOf: sizeComponents)
        }
        
        if !ingredientComponents.isEmpty {
            formattedComponents.append("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: \(ingredientComponents.joined(separator: ", "))")
        }
        
        if !optionComponents.isEmpty {
            formattedComponents.append("–û–ø—Ü—ñ—ó: \(optionComponents.joined(separator: "; "))")
        }
        
        let result = formattedComponents.joined(separator: "\n")
        print("   üìù –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
        return result
    }
}

// MARK: - Order Status History Item

struct OrderStatusHistoryItem: Codable, Identifiable {
    let id: String
    let status: OrderStatus
    let comment: String?
    let createdAt: String
    let createdBy: String?
}

// MARK: - Extensions for OrderStatusHistoryItem

extension OrderStatusHistoryItem {
    var formattedDate: String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "uk_UA")
        formatter.dateFormat = "d MMM HH:mm"
        
        if let date = ISO8601DateFormatter().date(from: createdAt) {
            return formatter.string(from: date)
        }
        
        // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        let iso8601Formatter = ISO8601DateFormatter()
        iso8601Formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        if let date = iso8601Formatter.date(from: createdAt) {
            return formatter.string(from: date)
        }
        
        return createdAt
    }
}

// MARK: - Payment Models

struct OrderPaymentInfo: Codable, Identifiable {
    let id: String
    let status: PaymentStatus
    let amount: Double
    let method: String?
    let transactionId: String?
    let createdAt: String
    let completedAt: String?
    let paymentUrl: String?
}

// MARK: - Extensions for OrderPaymentInfo

extension OrderPaymentInfo {
    var formattedAmount: String {
        return String(format: "%.2f ‚Ç¥", amount)
    }
    
    var statusDisplayName: String {
        switch status {
        case .pending:
            return "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏"
        case .processing:
            return "–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
        case .completed:
            return "–û–ø–ª–∞—á–µ–Ω–æ"
        case .failed:
            return "–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏"
        case .cancelled:
            return "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
        }
    }
    
    var statusColor: String {
        switch status {
        case .pending:
            return "orange"
        case .processing:
            return "primary"
        case .completed:
            return "green"
        case .failed:
            return "red"
        case .cancelled:
            return "nidusGrey"
        }
    }
}

// MARK: - Payment Status Enum

enum PaymentStatus: String, Codable, CaseIterable {
    case pending = "pending"
    case processing = "processing"
    case completed = "completed"
    case failed = "failed"
    case cancelled = "cancelled"
}

// MARK: - Order History Filters

enum OrderHistoryFilter: String, CaseIterable {
    case all = "all"
    case pending = "pending"
    case completed = "completed"
    case cancelled = "cancelled"
    
    var displayName: String {
        switch self {
        case .all:
            return "–í—Å—ñ"
        case .pending:
            return "–í –æ–±—Ä–æ–±—Ü—ñ"
        case .completed:
            return "–ó–∞–≤–µ—Ä—à–µ–Ω—ñ"
        case .cancelled:
            return "–°–∫–∞—Å–æ–≤–∞–Ω—ñ"
        }
    }
    
    var statuses: [OrderStatus]? {
        switch self {
        case .all:
            return nil
        case .pending:
            return [.created, .pending, .accepted, .preparing, .ready]
        case .completed:
            return [.completed]
        case .cancelled:
            return [.cancelled]
        }
    }
}

// MARK: - Customization Details

struct CustomizationDetails: Codable {
    let menuItem: CustomizationMenuItemDetail?
    let size: CustomizationSizeDetail?
    let options: [CustomizationOptionDetail]?
    let ingredients: [CustomizationIngredientDetail]?
    let priceSummary: CustomizationPriceSummaryDetail?
    
    // Regular initializer for programmatic creation
    init(
        menuItem: CustomizationMenuItemDetail? = nil,
        size: CustomizationSizeDetail? = nil,
        options: [CustomizationOptionDetail]? = nil,
        ingredients: [CustomizationIngredientDetail]? = nil,
        priceSummary: CustomizationPriceSummaryDetail? = nil
    ) {
        self.menuItem = menuItem
        self.size = size
        self.options = options
        self.ingredients = ingredients
        self.priceSummary = priceSummary
    }
    
    enum CodingKeys: String, CodingKey {
        case menuItem, size, options, ingredients, priceSummary
    }
}

struct CustomizationMenuItemDetail: Codable {
    let id: String
    let name: String
    let basePrice: Double
    
    enum CodingKeys: String, CodingKey {
        case id, name, basePrice
    }
}

struct CustomizationIngredientDetail: Codable {
    let id: String
    let name: String
    let amount: Int
    let unit: String?
    let pricing: IngredientPricingDetail?
    let constraints: IngredientConstraintsDetail?
    
    enum CodingKeys: String, CodingKey {
        case id, name, amount, unit, pricing, constraints
    }
}

struct IngredientPricingDetail: Codable {
    let pricePerUnit: Double?
    let freeAmount: Int?
    let chargedAmount: Int?
    let totalPrice: Double
    
    enum CodingKeys: String, CodingKey {
        case pricePerUnit, freeAmount, chargedAmount, totalPrice
    }
}

struct IngredientConstraintsDetail: Codable {
    let minAmount: Int?
    let maxAmount: Int?
    let isCustomizable: Bool?
    
    enum CodingKeys: String, CodingKey {
        case minAmount, maxAmount, isCustomizable
    }
}

struct CustomizationPriceSummaryDetail: Codable {
    let basePrice: Double
    let sizeAdjustment: Double?
    let optionsTotal: Double?
    let ingredientsTotal: Double?
    let finalPrice: Double
    
    enum CodingKeys: String, CodingKey {
        case basePrice, sizeAdjustment, optionsTotal, ingredientsTotal, finalPrice
    }
}

struct CustomizationSizeDetail: Codable {
    let id: String?
    let name: String
    let abbreviation: String?
    let additionalPrice: Double
    let isDefault: Bool?
    let order: Int?
    
    // For backward compatibility
    var price: Double {
        return additionalPrice
    }
    
    // Regular initializer for programmatic creation
    init(
        id: String? = nil,
        name: String,
        abbreviation: String? = nil,
        additionalPrice: Double,
        isDefault: Bool? = nil,
        order: Int? = nil
    ) {
        self.id = id
        self.name = name
        self.abbreviation = abbreviation
        self.additionalPrice = additionalPrice
        self.isDefault = isDefault
        self.order = order
    }
    
    // Convenience initializer for backward compatibility with old "price" parameter
    init(name: String, price: Double) {
        self.id = nil
        self.name = name
        self.abbreviation = nil
        self.additionalPrice = price
        self.isDefault = nil
        self.order = nil
    }
    
    enum CodingKeys: String, CodingKey {
        case id, name, abbreviation, additionalPrice, isDefault, order
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decodeIfPresent(String.self, forKey: .id)
        name = try container.decode(String.self, forKey: .name)
        abbreviation = try container.decodeIfPresent(String.self, forKey: .abbreviation)
        isDefault = try container.decodeIfPresent(Bool.self, forKey: .isDefault)
        order = try container.decodeIfPresent(Int.self, forKey: .order)
        
        // Handle price field changes from old to new API format
        if let newPrice = try? container.decode(Double.self, forKey: .additionalPrice) {
            additionalPrice = newPrice
        } else {
            // Try to decode the old "price" field for backward compatibility
            let legacyContainer = try decoder.container(keyedBy: AnyCodingKey.self)
            if let oldPrice = try? legacyContainer.decode(Double.self, forKey: AnyCodingKey(stringValue: "price")) {
                additionalPrice = oldPrice
            } else {
                additionalPrice = 0.0
            }
        }
    }
}

struct CustomizationOptionDetail: Codable {
    let optionGroupId: String?
    let optionGroupName: String?
    let required: Bool?
    let choices: [CustomizationChoiceDetail]?
    
    // Legacy fields for backward compatibility
    let name: String?
    let price: Double?
    let totalPrice: Double?
    let quantity: Int?
    
    // Regular initializer for programmatic creation
    init(
        optionGroupId: String? = nil,
        optionGroupName: String? = nil,
        required: Bool? = nil,
        choices: [CustomizationChoiceDetail]? = nil,
        name: String? = nil,
        price: Double? = nil,
        totalPrice: Double? = nil,
        quantity: Int? = nil
    ) {
        self.optionGroupId = optionGroupId
        self.optionGroupName = optionGroupName
        self.required = required
        self.choices = choices
        self.name = name
        self.price = price
        self.totalPrice = totalPrice
        self.quantity = quantity
    }
    
    // Convenience initializer for backward compatibility
    init(name: String, price: Double, totalPrice: Double, quantity: Int? = nil) {
        self.optionGroupId = nil
        self.optionGroupName = nil
        self.required = nil
        self.choices = nil
        self.name = name
        self.price = price
        self.totalPrice = totalPrice
        self.quantity = quantity
    }
    
    enum CodingKeys: String, CodingKey {
        case optionGroupId, optionGroupName, required, choices
        case name, price, totalPrice, quantity
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        // New API format
        optionGroupId = try container.decodeIfPresent(String.self, forKey: .optionGroupId)
        optionGroupName = try container.decodeIfPresent(String.self, forKey: .optionGroupName)
        required = try container.decodeIfPresent(Bool.self, forKey: .required)
        choices = try container.decodeIfPresent([CustomizationChoiceDetail].self, forKey: .choices)
        
        // Legacy format for backward compatibility
        name = try container.decodeIfPresent(String.self, forKey: .name)
        quantity = try container.decodeIfPresent(Int.self, forKey: .quantity)
        
        // Handle price fields for backward compatibility
        if let legacyPrice = try? container.decode(Double.self, forKey: .price) {
            price = legacyPrice
        } else {
            price = nil
        }
        
        if let legacyTotalPrice = try? container.decode(Double.self, forKey: .totalPrice) {
            totalPrice = legacyTotalPrice
        } else {
            totalPrice = nil
        }
    }
}

struct CustomizationChoiceDetail: Codable {
    let id: String
    let name: String
    let quantity: Int?
    let pricing: ChoicePricingDetail?
    let constraints: ChoiceConstraintsDetail?
    
    enum CodingKeys: String, CodingKey {
        case id, name, quantity, pricing, constraints
    }
}

struct ChoicePricingDetail: Codable {
    let basePrice: Double?
    let freeQuantity: Int?
    let pricePerAdditionalUnit: Double?
    let chargedQuantity: Int?
    let totalPrice: Double
    
    enum CodingKeys: String, CodingKey {
        case basePrice, freeQuantity, pricePerAdditionalUnit, chargedQuantity, totalPrice
    }
}

struct ChoiceConstraintsDetail: Codable {
    let minQuantity: Int?
    let maxQuantity: Int?
    let defaultQuantity: Int?
    
    enum CodingKeys: String, CodingKey {
        case minQuantity, maxQuantity, defaultQuantity
    }
}

// MARK: - Coffee Shop Info

struct CoffeeShopInfo: Codable {
    let id: String
    let name: String
    let address: String?
    
    enum CodingKeys: String, CodingKey {
        case id, name, address
    }
}

// MARK: - Customization Display Data

struct CustomizationDisplayData {
    let sizeInfo: String?
    let ingredients: [IngredientDisplayItem]
    let optionGroups: [String: [OptionDisplayItem]]
}

struct IngredientDisplayItem {
    let name: String
    let quantity: Int
    let unit: String
    let additionalPrice: Double
    
    var displayText: String {
        let quantityText = "\(quantity) \(unit)"
        if additionalPrice > 0 {
            return "\(name) \(quantityText) (+\(String(format: "%.0f", additionalPrice)) ‚Ç¥)"
        } else {
            return "\(name) \(quantityText)"
        }
    }
    
    var detailedDisplayInfo: (main: String, detail: String, price: String?) {
        let main = name
        let detail = "\(quantity) \(unit)"
        let price = additionalPrice > 0 ? "+\(String(format: "%.0f", additionalPrice)) ‚Ç¥" : nil
        return (main, detail, price)
    }
}

struct OptionDisplayItem {
    let name: String
    let quantity: Int
    let additionalPrice: Double
    
    var displayText: String {
        if quantity > 1 {
            if additionalPrice > 0 {
                return "\(name) x\(quantity) (+\(String(format: "%.0f", additionalPrice)) ‚Ç¥)"
            } else {
                return "\(name) x\(quantity)"
            }
        } else {
            if additionalPrice > 0 {
                return "\(name) (+\(String(format: "%.0f", additionalPrice)) ‚Ç¥)"
            } else {
                return name
            }
        }
    }
    
    var detailedDisplayInfo: (main: String, detail: String?, price: String?) {
        let main = name
        let detail = quantity > 1 ? "x\(quantity)" : nil
        let price = additionalPrice > 0 ? "+\(String(format: "%.0f", additionalPrice)) ‚Ç¥" : nil
        return (main, detail, price)
    }
}


