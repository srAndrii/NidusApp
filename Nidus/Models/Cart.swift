//
//  Untitled.swift
//  Nidus
//
//  Created by Andrii Liakhovych on 5/18/25.
//

import Foundation

struct Cart: Codable {
    var items: [CartItem] = []
    var coffeeShopId: String? = nil
    
    // –û–±—á–∏—Å–ª—é–≤–∞–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    var isEmpty: Bool {
        return items.isEmpty
    }
    
    var itemCount: Int {
        return items.reduce(0) { $0 + $1.quantity }
    }
    
    var totalPrice: Decimal {
        return items.reduce(Decimal(0)) { $0 + $1.totalPrice }
    }
    
    // –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞
    var formattedTotalPrice: String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencyCode = "UAH"
        formatter.minimumFractionDigits = 0
        formatter.maximumFractionDigits = 2
        return formatter.string(from: NSDecimalNumber(decimal: totalPrice)) ?? "‚Ç¥\(totalPrice)"
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑ —ñ–Ω—à–æ—ó –∫–∞–≤'—è—Ä–Ω—ñ –º–æ–∂–ª–∏–≤–µ
    func canAddItemFromCoffeeShop(coffeeShopId: String) -> Bool {
        // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑ —Ç—ñ—î—ó –∂ –∫–∞–≤'—è—Ä–Ω—ñ
        let isEmpty = items.isEmpty
        let isSameCoffeeShop = self.coffeeShopId == coffeeShopId
        
        print("üìù Cart.canAddItemFromCoffeeShop: –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è? \(isEmpty), –¢–æ–π –∂–µ ID –∫–∞–≤'—è—Ä–Ω—ñ? \(isSameCoffeeShop)")
        print("   - –ü–æ—Ç–æ—á–Ω–∏–π ID –∫–∞–≤'—è—Ä–Ω—ñ –≤ –∫–æ—Ä–∑–∏–Ω—ñ: \(self.coffeeShopId ?? "–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")")
        print("   - ID –∫–∞–≤'—è—Ä–Ω—ñ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É: \(coffeeShopId)")
        
        return isEmpty || isSameCoffeeShop
    }
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—Ä–∑–∏–Ω–∏
    mutating func addItem(_ item: CartItem) {
        // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∫–∞–≤'—è—Ä–Ω—ñ
        if items.isEmpty {
            self.coffeeShopId = item.coffeeShopId
            print("üìù Cart: –ö–æ—Ä–∑–∏–Ω–∞ –±—É–ª–∞ –ø–æ—Ä–æ–∂–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ID –∫–∞–≤'—è—Ä–Ω—ñ: \(item.coffeeShopId)")
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Ç–∞–∫–∏–π —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—ñ
        if let index = items.firstIndex(where: { $0.menuItemId == item.menuItemId && $0.selectedSize == item.selectedSize }) {
            // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            items[index].quantity += item.quantity
            print("üìù Cart: –ó–±—ñ–ª—å—à–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–æ–≤–∞—Ä—É \(item.name) –¥–æ \(items[index].quantity)")
        } else {
            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
            items.append(item)
            print("üìù Cart: –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä \(item.name), –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–µ–ø–µ—Ä: \(items.count)")
        }
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É
    mutating func updateQuantity(for itemId: String, quantity: Int) {
        if let index = items.firstIndex(where: { $0.id == itemId }) {
            items[index].quantity = max(1, quantity)  // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - 1
        }
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∫–æ—Ä–∑–∏–Ω–∏
    mutating func removeItem(at index: Int) {
        guard index < items.count else { return }
        items.remove(at: index)
        
        // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è, —Å–∫–∏–¥–∞—î–º–æ ID –∫–∞–≤'—è—Ä–Ω—ñ
        if items.isEmpty {
            coffeeShopId = nil
        }
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–∞ ID
    mutating func removeItem(withId id: String) {
        items.removeAll(where: { $0.id == id })
        
        // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è, —Å–∫–∏–¥–∞—î–º–æ ID –∫–∞–≤'—è—Ä–Ω—ñ
        if items.isEmpty {
            coffeeShopId = nil
        }
    }
    
    // –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏
    mutating func clear() {
        items.removeAll()
        coffeeShopId = nil
    }
}
