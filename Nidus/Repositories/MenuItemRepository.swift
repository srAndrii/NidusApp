// MenuItemRepository.swift
import Foundation

protocol MenuItemRepositoryProtocol {
    // MARK: - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏
    func getMenuItems(groupId: String) async throws -> [MenuItem]
    
    /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    func getMenuItem(groupId: String, itemId: String) async throws -> MenuItem
    
    /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é (–∑–∞ —Ü—ñ–Ω–æ—é)
    func getFilteredMenuItems(groupId: String, minPrice: Double?, maxPrice: Double?) async throws -> [MenuItem]
    
    // MARK: - –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    func createMenuItem(groupId: String, item: CreateMenuItemRequest) async throws -> MenuItem
    
    /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    func updateMenuItem(groupId: String, itemId: String, updates: [String: Any]) async throws -> MenuItem
    
    /// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    func deleteMenuItem(groupId: String, itemId: String) async throws
    
    /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    func updateAvailability(groupId: String, itemId: String, available: Bool) async throws -> MenuItem
}

struct CreateMenuItemRequest: Codable {
    let name: String
    let price: Decimal
    let description: String?
    let isAvailable: Bool
    let ingredients: [Ingredient]?
    let customizationOptions: [String: [String]]?
    var menuGroupId: String
    
    // –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π –∫–æ–¥–µ—Ä –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º price
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ price —è–∫ —á–∏—Å–ª–æ, –Ω–µ —è–∫ —Ä—è–¥–æ–∫
        try container.encode(NSDecimalNumber(decimal: price).doubleValue, forKey: .price)
        
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(isAvailable, forKey: .isAvailable)
        try container.encodeIfPresent(ingredients, forKey: .ingredients)
        try container.encodeIfPresent(customizationOptions, forKey: .customizationOptions)
        try container.encode(menuGroupId, forKey: .menuGroupId)
    }
    
    enum CodingKeys: String, CodingKey {
        case name, price, description, isAvailable, ingredients, customizationOptions, menuGroupId
    }
}

class MenuItemRepository: MenuItemRepositoryProtocol {
    private let networkService: NetworkService
    
    init(networkService: NetworkService = NetworkService.shared) {
        self.networkService = networkService
    }
    
    // MARK: - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    
    func getMenuItems(groupId: String) async throws -> [MenuItem] {
        return try await networkService.fetch(endpoint: "/menu-groups/\(groupId)/items")
    }
    
    func getMenuItem(groupId: String, itemId: String) async throws -> MenuItem {
        return try await networkService.fetch(endpoint: "/menu-groups/\(groupId)/items/\(itemId)")
    }
    
    func getFilteredMenuItems(groupId: String, minPrice: Double?, maxPrice: Double?) async throws -> [MenuItem] {
        var endpoint = "/menu-groups/\(groupId)/items/filter?"
        
        if let minPrice = minPrice {
            endpoint += "minPrice=\(minPrice)&"
        }
        
        if let maxPrice = maxPrice {
            endpoint += "maxPrice=\(maxPrice)&"
        }
        
        // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–º–≤–æ–ª, —è–∫—â–æ —Ü–µ '&' –∞–±–æ '?'
        if endpoint.last == "&" || endpoint.last == "?" {
            endpoint.removeLast()
        }
        
        return try await networkService.fetch(endpoint: endpoint)
    }
    
    // MARK: - –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    
    func createMenuItem(groupId: String, item: CreateMenuItemRequest) async throws -> MenuItem {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Ç—É, —â–æ–± –º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π menuGroupId
        var createRequest = item
        createRequest.menuGroupId = groupId
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        let menuItem: MenuItem = try await networkService.post(endpoint: "/menu-groups/\(groupId)/items", body: createRequest)
        
        // –Ø–∫—â–æ menuGroupId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤—Ä—É—á–Ω—É
        var updatedMenuItem = menuItem
        if updatedMenuItem.menuGroupId == nil {
            updatedMenuItem.menuGroupId = groupId
        }
        
        return updatedMenuItem
    }
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Dictionary –¥–ª—è –≥–Ω—É—á–∫–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    func updateMenuItem(groupId: String, itemId: String, updates: [String: Any]) async throws -> MenuItem {
        print("üì° MenuItemRepository.updateMenuItem - –ø–æ—á–∞—Ç–æ–∫")
            print("üì° groupId: \(groupId), itemId: \(itemId)")
            print("üì° updates: \(updates)")
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω—É –∫–æ–ø—ñ—é –æ–Ω–æ–≤–ª–µ–Ω—å –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            var safeUpdates = [String: Any]()
            
            // –ö–æ–ø—ñ—é—î–º–æ –ø—Ä–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —î
            for (key, value) in updates {
                if key != "ingredients" && key != "customizationOptions" {
                    safeUpdates[key] = value
                    print("üì° –ö–æ–ø—ñ—é—î–º–æ –ø—Ä–æ—Å—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è: \(key): \(value)")
                }
            }
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è Dictionary –Ω–∞ JSON data
        let jsonData = try JSONSerialization.data(withJSONObject: safeUpdates)
        if let jsonString = String(data: jsonData, encoding: .utf8) {
            print("üì° –°–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π JSON –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: \(jsonString)")
        }
        
        print("JSON –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: \(String(data: jsonData, encoding: .utf8) ?? "–Ω–µ–≤—ñ–¥–æ–º–æ")")
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É
        var urlRequest = try createRequest(for: "/menu-groups/\(groupId)/items/\(itemId)", method: "PATCH")
        urlRequest.httpBody = jsonData
        
        let (data, response) = try await URLSession.shared.data(for: urlRequest)
        
        // –õ–æ–≥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if let responseString = String(data: data, encoding: .utf8) {
            print("üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
        }
        
        guard let httpResponse = response as? HTTPURLResponse, (200...299).contains(httpResponse.statusCode) else {
            throw APIError.invalidResponse
        }
        
        // –í–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if let responseString = String(data: data, encoding: .utf8) {
            print("–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
        }
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–µ–∫–æ–¥–µ—Ä –∑ –Ω–∞–¥—ñ–π–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –¥–∞—Ç
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .custom { decoder in
            let container = try decoder.singleValueContainer()
            let dateStr = try container.decode(String.self)
            
            // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç
            let formatters = [
                "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
                "yyyy-MM-dd'T'HH:mm:ssZ",
                "yyyy-MM-dd'T'HH:mm:ss"
            ].map { format -> DateFormatter in
                let formatter = DateFormatter()
                formatter.dateFormat = format
                formatter.locale = Locale(identifier: "en_US_POSIX")
                return formatter
            }
            
            for formatter in formatters {
                if let date = formatter.date(from: dateStr) {
                    return date
                }
            }
            
            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É: \(dateStr)")
            return Date()
        }
        
        do {
            return try decoder.decode(MenuItem.self, from: data)
        } catch {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è: \(error)")
            
            // –Ø–∫—â–æ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—É–Ω–∫—Ç –º–µ–Ω—é –æ–∫—Ä–µ–º–∏–º –∑–∞–ø–∏—Ç–æ–º
            return try await getMenuItem(groupId: groupId, itemId: itemId)
        }
    }
    
    func deleteMenuItem(groupId: String, itemId: String) async throws {
        try await networkService.deleteWithoutResponse(endpoint: "/menu-groups/\(groupId)/items/\(itemId)")
    }
    
    func updateAvailability(groupId: String, itemId: String, available: Bool) async throws -> MenuItem {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        let endpoint = "/menu-groups/\(groupId)/items/\(itemId)/availability?available=\(available)"
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –±–µ–∑ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        let (_, response) = try await networkService.createPatchRequest(endpoint: endpoint, body: EmptyBody())
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
        guard let httpResponse = response as? HTTPURLResponse,
              (200...299).contains(httpResponse.statusCode) else {
            throw APIError.invalidResponse
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
        return try await getMenuItem(groupId: groupId, itemId: itemId)
    }
    
    // MARK: - –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    
    private func createRequest(for endpoint: String, method: String) throws -> URLRequest {
        let baseURL = networkService.getBaseURL()
        guard let url = URL(string: baseURL + endpoint) else {
            throw APIError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = method
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        guard let token = UserDefaults.standard.string(forKey: "accessToken") else {
            throw APIError.unauthorized
        }
        
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        return request
    }
    
    // –£ –∫–ª–∞—Å—ñ `MenuItemRepository`, –¥–æ–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è:
    private func logApiRequest(endpoint: String, method: String, body: Data?) {
        print("üì° API –∑–∞–ø–∏—Ç: \(method) \(endpoint)")
        if let body = body, let bodyString = String(data: body, encoding: .utf8) {
            print("üì° –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É: \(bodyString)")
        } else if body != nil {
            print("üì° –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É –ø—Ä–∏—Å—É—Ç–Ω—î, –∞–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–µ –Ω–∞ —Ä—è–¥–æ–∫")
        } else {
            print("üì° –ó–∞–ø–∏—Ç –±–µ–∑ —Ç—ñ–ª–∞")
        }
    }
    
    struct EmptyBody: Codable {}
}
