//
//  PaymentWebView.swift
//  Nidus
//
//  Created by Claude on 5/31/25.
//

import SwiftUI
import WebKit

// MARK: - WebView –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–ø–ª–∞—Ç–∏
struct PaymentWebView: UIViewRepresentable {
    let url: URL
    @Environment(\.presentationMode) var presentationMode
    
    func makeUIView(context: Context) -> WKWebView {
        let preferences = WKPreferences()
        preferences.javaScriptEnabled = true
        
        let configuration = WKWebViewConfiguration()
        configuration.preferences = preferences
        
        // –î–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ –º–µ–¥—ñ–∞ —Ç–∏–ø–∏
        configuration.allowsInlineMediaPlayback = true
        configuration.mediaTypesRequiringUserActionForPlayback = []
        
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.navigationDelegate = context.coordinator
        
        print("üåê PaymentWebView: –°—Ç–≤–æ—Ä–µ–Ω–æ WebView –¥–ª—è URL: \(url)")
        return webView
    }
    
    func updateUIView(_ webView: WKWebView, context: Context) {
        let request = URLRequest(url: url)
        webView.load(request)
        print("üåê PaymentWebView: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ URL: \(url)")
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, WKNavigationDelegate {
        var parent: PaymentWebView
        
        init(_ parent: PaymentWebView) {
            self.parent = parent
        }
        
        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            guard let url = navigationAction.request.url else {
                print("‚ö†Ô∏è PaymentWebView: URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ navigation action")
                decisionHandler(.allow)
                return
            }
            
            print("üîó PaymentWebView: Navigation –¥–æ URL: \(url.absoluteString)")
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ redirect URL
            let urlString = url.absoluteString.lowercased()
            
            if urlString.contains("nidus://") || 
               urlString.contains("payment-callback") ||
               urlString.contains("success") ||
               urlString.contains("–∑–∞–≤–µ—Ä—à–µ–Ω–æ") ||
               url.scheme == "nidus" {
                
                print("‚úÖ PaymentWebView: –ó–Ω–∞–π–¥–µ–Ω–æ redirect URL, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ WebView")
                print("   - URL: \(url.absoluteString)")
                print("   - Scheme: \(url.scheme ?? "–Ω–µ–º–∞—î")")
                print("   - Host: \(url.host ?? "–Ω–µ–º–∞—î")")
                
                // –í—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –¥–æ redirect URL
                decisionHandler(.cancel)
                
                // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ WebView —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É
                DispatchQueue.main.async {
                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ notification –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É
                    NotificationCenter.default.post(name: .paymentSuccessful, object: nil)
                    
                    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ WebView
                    self.parent.presentationMode.wrappedValue.dismiss()
                }
                
                return
            }
            
            // –î–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ URL
            decisionHandler(.allow)
        }
        
        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            print("‚úÖ PaymentWebView: –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            
            if let url = webView.url {
                print("   - –ü–æ—Ç–æ—á–Ω–∏–π URL: \(url.absoluteString)")
            }
        }
        
        func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
            print("‚ùå PaymentWebView: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: \(error.localizedDescription)")
        }
        
        func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
            let nsError = error as NSError
            print("‚ùå PaymentWebView: Provisional navigation –ø–æ–º–∏–ª–∫–∞:")
            print("   - –ö–æ–¥: \(nsError.code)")
            print("   - –î–æ–º–µ–Ω: \(nsError.domain)")
            print("   - –û–ø–∏—Å: \(error.localizedDescription)")
            
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ timeout –¥–ª—è redirect URL
            if nsError.domain == NSURLErrorDomain && nsError.code == NSURLErrorTimedOut {
                print("‚ö†Ô∏è PaymentWebView: Timeout –ø–æ–º–∏–ª–∫–∞ (–º–æ–∂–ª–∏–≤–æ redirect), –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL")
                
                if let url = webView.url, url.scheme == "nidus" {
                    print("‚úÖ PaymentWebView: Timeout –Ω–∞ redirect URL, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ WebView")
                    
                    DispatchQueue.main.async {
                        NotificationCenter.default.post(name: .paymentSuccessful, object: nil)
                        self.parent.presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }
}