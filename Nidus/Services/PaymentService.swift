//
//  PaymentService.swift
//  Nidus
//
//  Created by Andrii Liakhovych on 5/18/25.
//

import Foundation
import UIKit
import WebKit

class PaymentService {
    // –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–µ—Ä–≤—ñ—Å—É
    static let shared = PaymentService()
    
    // –°–µ—Ä–≤—ñ—Å –º–µ—Ä–µ–∂—ñ
    private let networkService: NetworkService
    
    // –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    private let deepLinkScheme = "nidus://"
    
    // –ü–æ–≤–Ω–∏–π URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
    private var redirectUrl: String {
        return "\(deepLinkScheme)payment-callback"
    }
    
    private init(networkService: NetworkService = NetworkService.shared) {
        self.networkService = networkService
    }
    
    // MARK: - –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –æ–ø–ª–∞—Ç–æ—é
    func createOrderWithPayment(
        coffeeShopId: String,
        items: [CartItem],
        comment: String? = nil,
        scheduledFor: Date? = nil
    ) async throws -> CreateOrderWithPaymentResultDto {
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Ç—É
        let orderItems = items.map { item -> CreateOrderItemDto in
            print("üìù PaymentService: –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—É \(item.name)")
            print("   - –î–∞–Ω—ñ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó: \(String(describing: item.customization))")
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ —î
            var customizationDto: OrderItemCustomizationDto? = nil
            
            if let customization = item.customization {
                customizationDto = OrderItemCustomizationDto()
                
                // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä, –≤–∫–ª—é—á–∞—é—á–∏ ID —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ü—ñ–Ω—É
                if let sizeData = customization["size"] as? [String: Any] {
                    if let sizeId = sizeData["id"] as? String {
                        customizationDto?.selectedSize = sizeId
                        print("   - –†–æ–∑–º—ñ—Ä: \(sizeData["abbreviation"] as? String ?? "–Ω–µ–≤—ñ–¥–æ–º–æ") (ID: \(sizeId))")
                        
                        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ü—ñ–Ω—É
                        if let additionalPrice = sizeData["additionalPrice"] as? Decimal {
                            customizationDto?.selectedSizeData = SizeDataDto(id: sizeId, additionalPrice: additionalPrice)
                            print("   - –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –∑–∞ —Ä–æ–∑–º—ñ—Ä: +\(additionalPrice)")
                        }
                    }
                }
                
                // –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –∑ —Ñ–æ—Ä–º–∞—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ—Ä–∑–∏–Ω—ñ
                if let ingredients = customization["ingredients"] as? [[String: Any]] {
                    var selectedIngredients: [String: Double] = [:]
                    
                    for ingredient in ingredients {
                        if let id = ingredient["id"] as? String,
                           let amount = ingredient["amount"] as? Double {
                            selectedIngredients[id] = amount
                        }
                    }
                    
                    if !selectedIngredients.isEmpty {
                        customizationDto?.selectedIngredients = selectedIngredients
                        print("   - –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: \(selectedIngredients)")
                    }
                }
                
                // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–ø—Ü—ñ—ó –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó –∑ —Ñ–æ—Ä–º–∞—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ—Ä–∑–∏–Ω—ñ
                if let options = customization["options"] as? [[String: Any]] {
                    var selectedOptions: [String: [OptionChoiceDto]] = [:]
                    
                    for option in options {
                        if let optionId = option["id"] as? String,
                           let choices = option["choices"] as? [[String: Any]] {
                            
                            var processedChoices: [OptionChoiceDto] = []
                            
                            for choice in choices {
                                if let choiceId = choice["id"] as? String {
                                    let quantity = choice["quantity"] as? Int ?? 1
                                    processedChoices.append(OptionChoiceDto(choiceId: choiceId, quantity: quantity))
                                }
                            }
                            
                            if !processedChoices.isEmpty {
                                selectedOptions[optionId] = processedChoices
                            }
                        }
                    }
                    
                    if !selectedOptions.isEmpty {
                        customizationDto?.selectedOptions = selectedOptions
                        print("   - –û–ø—Ü—ñ—ó: \(selectedOptions)")
                    }
                }
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è —Ç–æ–≤–∞—Ä—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            let orderItem = CreateOrderItemDto(
                menuItemId: item.menuItemId,
                quantity: item.quantity,
                customization: customizationDto
            )
            
            print("   - –°—Ç–≤–æ—Ä–µ–Ω–æ OrderItemDto: menuItemId=\(item.menuItemId), quantity=\(item.quantity)")
            return orderItem
        }
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
        var scheduledForString: String?
        if let scheduledFor = scheduledFor {
            let formatter = ISO8601DateFormatter()
            scheduledForString = formatter.string(from: scheduledFor)
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        let createOrderDto = CreateOrderDto(
            coffeeShopId: coffeeShopId,
            items: orderItems,
            comment: comment,
            scheduledFor: scheduledForString,
            redirectUrl: redirectUrl
        )
        
        print("üìù PaymentService: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
        print("   - Coffee Shop ID: \(coffeeShopId)")
        print("   - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: \(orderItems.count)")
        print("   - –ö–æ–º–µ–Ω—Ç–∞—Ä: \(comment ?? "–Ω–µ–º–∞—î")")
        print("   - Redirect URL: \(redirectUrl)")
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        return try await networkService.post(
            endpoint: "/orders/create-with-payment",
            body: createOrderDto
        )
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏
    func getOrderPaymentStatus(orderId: String) async throws -> OrderPaymentStatusDto {
        return try await networkService.fetch(
            endpoint: "/orders/\(orderId)/payment-status"
        )
    }
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    func retryPayment(orderId: String) async throws -> CreateOrderWithPaymentResultDto {
        return try await networkService.post(
            endpoint: "/orders/\(orderId)/retry-payment",
            body: EmptyObject()
        )
    }
    
    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    func cancelOrder(orderId: String) async throws -> Order {
        return try await networkService.patch(
            endpoint: "/orders/\(orderId)/cancel",
            body: EmptyObject()
        )
    }
    
    // MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤/–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    
    struct EmptyObject: Codable {}
    
    struct SizeDataDto: Codable {
        let id: String
        let additionalPrice: Decimal
    }
    
    struct OrderItemCustomizationDto: Codable {
        var selectedSize: String?
        var selectedSizeData: SizeDataDto?
        var selectedIngredients: [String: Double]?
        var selectedOptions: [String: [OptionChoiceDto]]?
    }
    
    struct OptionChoiceDto: Codable {
        let choiceId: String
        let quantity: Int?
    }
    
    struct CreateOrderItemDto: Codable {
        let menuItemId: String
        let quantity: Int
        let customization: OrderItemCustomizationDto?
    }
    
    struct CreateOrderDto: Codable {
        let coffeeShopId: String
        let items: [CreateOrderItemDto]
        let comment: String?
        let scheduledFor: String?
        let redirectUrl: String
    }
}

// MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π API
struct CreateOrderWithPaymentResultDto: Codable {
    let orderId: String
    let orderNumber: String
    let status: String
    let totalAmount: Decimal
    let paymentUrl: String
    let paymentId: String
    let expiresAt: String?
}

struct OrderPaymentStatusDto: Codable {
    let orderId: String
    let paymentId: String?
    let status: String
    let paidAmount: Decimal
    let isPaid: Bool
    let paymentUrl: String?
}
