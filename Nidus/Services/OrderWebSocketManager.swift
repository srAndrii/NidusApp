import Foundation
import SocketIO
import Combine

final class OrderWebSocketManager: ObservableObject {
    static let shared = OrderWebSocketManager()
    
    private var manager: SocketManager?
    private var socket: SocketIOClient?
    
    @Published var isConnected = false
    @Published var connectionError: String?
    
    private let orderStatusUpdateSubject = PassthroughSubject<OrderStatusUpdateData, Never>()
    var orderStatusUpdatePublisher: AnyPublisher<OrderStatusUpdateData, Never> {
        orderStatusUpdateSubject.eraseToAnyPublisher()
    }
    
    private init() {}
    
    struct OrderStatusUpdateData {
        let orderId: String
        let newStatus: OrderStatus
        let previousStatus: OrderStatus?
        let orderNumber: String?
        let coffeeShopId: String?
        let comment: String?
        let updatedAt: Date?
    }
    
    func connect(userId: String) {
        disconnect()
        
        // –ó–∞–≤–∂–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ production —Å–µ—Ä–≤–µ—Ä–∞
        let socketURL = URL(string: "wss://nidus-production.up.railway.app")!
        print("üì° WebSocket: Connecting to production server: \(socketURL.absoluteString)")
        print("üë§ WebSocket: User ID: \(userId)")
        
        let config: SocketIOClientConfiguration = [
            .log(true),
            .compress,
            .forceWebsockets(false), // –î–æ–∑–≤–æ–ª—è—î–º–æ polling —è–∫ fallback
            .reconnects(true),
            .reconnectAttempts(5),
            .reconnectWait(3),
            .connectParams(["userId": userId]) // –ü–µ—Ä–µ–¥–∞—î–º–æ userId –∑–∞–º—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
        ]
        
        manager = SocketManager(socketURL: socketURL, config: config)
        socket = manager?.defaultSocket
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        socket?.on(clientEvent: .connect) { [weak self] data, ack in
            print("‚úÖ WebSocket: Connected successfully")
            print("üì° Socket ID: \(self?.socket?.sid ?? "unknown")")
            print("üì° Connect data: \(data)")
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ join –ø–æ–¥—ñ—é –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
            print("üîó WebSocket: Sending join event...")
            self?.socket?.emit("join", ["userId": userId])
            
            DispatchQueue.main.async {
                self?.isConnected = true
                self?.connectionError = nil
            }
        }
        
        setupEventHandlers()
        socket?.connect()
    }
    
    func disconnect() {
        print("üì° WebSocket: Disconnecting")
        socket?.disconnect()
        socket?.removeAllHandlers()
        socket = nil
        manager = nil
        isConnected = false
        connectionError = nil
    }
    
    private func setupEventHandlers() {
        
        socket?.on(clientEvent: .disconnect) { [weak self] data, ack in
            print("üîå WebSocket: Disconnected")
            DispatchQueue.main.async {
                self?.isConnected = false
            }
        }
        
        socket?.on(clientEvent: .error) { [weak self] data, ack in
            print("‚ùå WebSocket Error: \(data)")
            DispatchQueue.main.async {
                self?.connectionError = "WebSocket connection error"
                self?.isConnected = false
            }
        }
        
        socket?.on(clientEvent: .reconnect) { data, ack in
            print("üîÑ WebSocket: Reconnected")
        }
        
        socket?.on(clientEvent: .reconnectAttempt) { data, ack in
            print("üîÑ WebSocket: Reconnection attempt \(data)")
        }
        
        socket?.on("connect_error") { [weak self] data, ack in
            print("‚ùå WebSocket Connection Error: \(data)")
            print("‚ùå Error details:")
            for (index, item) in data.enumerated() {
                print("   [\(index)]: \(item)")
                if let errorDict = item as? [String: Any] {
                    for (key, value) in errorDict {
                        print("      \(key): \(value)")
                    }
                }
            }
            
            let errorMessage: String
            if let error = data.first as? [String: Any],
               let message = error["message"] as? String {
                errorMessage = message
            } else if let stringError = data.first as? String {
                errorMessage = stringError
            } else {
                errorMessage = "Unknown connection error: \(data)"
            }
            
            DispatchQueue.main.async {
                self?.connectionError = errorMessage
                self?.isConnected = false
            }
        }
        
        // –°–ª—É—Ö–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
        socket?.on("joined") { data, ack in
            print("üîó WebSocket: Successfully joined: \(data)")
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞ –ø–æ–¥—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω—å (–¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤)
        socket?.on("orderStatusUpdated") { [weak self] data, ack in
            print("üì¨ WebSocket: Received orderStatusUpdated event")
            print("üì¶ Data: \(data)")
            
            guard let orderData = data.first as? [String: Any] else {
                print("‚ùå WebSocket: Invalid orderStatusUpdated data format")
                return
            }
            
            self?.handleOrderStatusUpdate(orderData)
        }
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–æ–¥—ñ—è –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        socket?.on("newOrderReceived") { data, ack in
            print("üì® WebSocket: Received newOrderReceived event: \(data)")
        }
        
        // –õ–æ–≥—É—î–º–æ –≤—Å—ñ –Ω–µ–≤—ñ–¥–æ–º—ñ –ø–æ–¥—ñ—ó
        socket?.onAny { event in
            print("üîç WebSocket: Event '\(event.event)' with data: \(event.items)")
        }
    }
    
    private func handleOrderStatusUpdate(_ data: [String: Any]) {
        print("üîç WebSocket: Parsing order status update data: \(data)")
        
        guard let orderId = data["orderId"] as? String else {
            print("‚ùå WebSocket: Missing orderId in order status update")
            return
        }
        
        // –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î "status" –∑–∞–º—ñ—Å—Ç—å "newStatus"
        guard let newStatusString = data["status"] as? String,
              let newStatus = OrderStatus(rawValue: newStatusString) else {
            print("‚ùå WebSocket: Missing or invalid status field: \(data["status"] ?? "nil")")
            return
        }
        
        let previousStatus: OrderStatus?
        if let prevStatusString = data["previousStatus"] as? String {
            previousStatus = OrderStatus(rawValue: prevStatusString)
        } else {
            previousStatus = nil
        }
        
        let updatedAt: Date?
        if let updatedAtString = data["updatedAt"] as? String {
            let formatter = ISO8601DateFormatter()
            updatedAt = formatter.date(from: updatedAtString)
        } else {
            updatedAt = nil
        }
        
        let updateData = OrderStatusUpdateData(
            orderId: orderId,
            newStatus: newStatus,
            previousStatus: previousStatus,
            orderNumber: data["orderNumber"] as? String,
            coffeeShopId: data["coffeeShopId"] as? String,
            comment: data["comment"] as? String,
            updatedAt: updatedAt
        )
        
        print("‚úÖ WebSocket: Processing order status update")
        print("   Order ID: \(orderId)")
        print("   New Status: \(newStatus.rawValue)")
        print("   Previous Status: \(previousStatus?.rawValue ?? "none")")
        print("   Order Number: \(updateData.orderNumber ?? "none")")
        print("   Comment: \(updateData.comment ?? "none")")
        print("   Coffee Shop ID: \(updateData.coffeeShopId ?? "none")")
        
        DispatchQueue.main.async {
            self.orderStatusUpdateSubject.send(updateData)
            
            NotificationCenter.default.post(
                name: .init("OrderStatusUpdated"),
                object: nil,
                userInfo: [
                    "orderId": orderId,
                    "newStatus": newStatus,
                    "previousStatus": previousStatus as Any,
                    "orderNumber": updateData.orderNumber as Any,
                    "comment": updateData.comment as Any
                ]
            )
        }
    }
}