import UIKit
import Foundation

enum APIError: Error, LocalizedError {
    case invalidURL
    case requestFailed(Error)
    case invalidResponse
    case decodingFailed(Error)
    case unauthorized
    case serverError(statusCode: Int, message: String?)
    case simpleServerError(message: String)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–¥—ñ–π—Å–Ω–∞ URL-–∞–¥—Ä–µ—Å–∞"
        case .requestFailed(let error):
            return "–ó–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏: \(error.localizedDescription)"
        case .invalidResponse:
            return "–û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–µ–¥—ñ–π—Å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞"
        case .decodingFailed(let error):
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: \(error.localizedDescription)"
        case .unauthorized:
            return "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É"
        case .serverError(statusCode: let statusCode, message: let message):
            return "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (\(statusCode)): \(message ?? "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")"
        case .simpleServerError(message: let message):
            return "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(message)"
        }
    }
}

struct ErrorResponse: Decodable {
    let message: String
    let error: String
    let statusCode: Int
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        error = try container.decode(String.self, forKey: .error)
        statusCode = try container.decode(Int.self, forKey: .statusCode)
        
        // –î–µ–∫–æ–¥—É—î–º–æ "message" –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
        if let messageArray = try? container.decode([String].self, forKey: .message) {
            // –Ø–∫—â–æ —Ü–µ –º–∞—Å–∏–≤, –æ–±'—î–¥–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
            message = messageArray.joined(separator: ", ")
        } else if let messageString = try? container.decode(String.self, forKey: .message) {
            // –Ø–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
            message = messageString
        } else {
            // –Ø–∫—â–æ –ø–æ–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –º–∞—î –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç
            message = "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
        }
    }
    
    enum CodingKeys: String, CodingKey {
        case message, error, statusCode
    }
}

class NetworkService {
    static let shared = NetworkService()
    
    private let baseURL = "https://nidus-production.up.railway.app/api"
    private let userDefaults = UserDefaults.standard
    
    private init() {}
    
    // MARK: - Auth Token Management
    
    private var accessToken: String? {
        get {
            return userDefaults.string(forKey: "accessToken")
        }
        set {
            if let newValue = newValue {
                userDefaults.set(newValue, forKey: "accessToken")
            } else {
                userDefaults.removeObject(forKey: "accessToken")
            }
        }
    }
    
    private var refreshToken: String? {
        get {
            return userDefaults.string(forKey: "refreshToken")
        }
        set {
            if let newValue = newValue {
                userDefaults.set(newValue, forKey: "refreshToken")
            } else {
                userDefaults.removeObject(forKey: "refreshToken")
            }
        }
    }
    
    func saveTokens(accessToken: String, refreshToken: String) {
        self.accessToken = accessToken
        self.refreshToken = refreshToken
    }
    
    func clearTokens() {
        accessToken = nil
        refreshToken = nil
    }
    
    // MARK: - API Methods
    
    func getBaseURL() -> String {
        return baseURL
    }
    
    func fetch<T: Decodable>(endpoint: String, requiresAuth: Bool = true) async throws -> T {
        print("üåê [NetworkService] Starting fetch request")
        print("üìç [NetworkService] Endpoint: \(endpoint)")
        print("üîë [NetworkService] Requires auth: \(requiresAuth)")
        print("üåç [NetworkService] Full URL: \(baseURL)\(endpoint)")
        
        var urlRequest = try createRequest(for: endpoint, method: "GET", requiresAuth: requiresAuth)
        
        print("üì° [NetworkService] Request headers: \(urlRequest.allHTTPHeaderFields ?? [:])")
        
        let result: T = try await performRequest(urlRequest)
        print("‚úÖ [NetworkService] Successfully fetched data for endpoint: \(endpoint)")
        return result
    }
    
    func post<T: Encodable, U: Decodable>(endpoint: String, body: T, requiresAuth: Bool = true) async throws -> U {
        var urlRequest = try createRequest(for: endpoint, method: "POST", requiresAuth: requiresAuth)
        return try await performRequestWithBody(urlRequest, body: body)
    }
    
    // –ó–∞–ª–∏—à–∞—î–º–æ –º–µ—Ç–æ–¥ patch –¥–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
    func patch<T: Encodable, U: Decodable>(endpoint: String, body: T, requiresAuth: Bool = true) async throws -> U {
        var urlRequest = try createRequest(for: endpoint, method: "PATCH", requiresAuth: requiresAuth)
        
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .iso8601
        
        do {
            let requestData = try encoder.encode(body)
            urlRequest.httpBody = requestData
            
            let (data, response) = try await URLSession.shared.data(for: urlRequest)
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            guard let httpResponse = response as? HTTPURLResponse else {
                throw APIError.invalidResponse
            }
            
            if (200...299).contains(httpResponse.statusCode) {
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .custom { decoder in
                        let container = try decoder.singleValueContainer()
                        let dateStr = try container.decode(String.self)
                        
                        print("üïê [PATCH] –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –¥–∞—Ç—É: '\(dateStr)'")
                        
                        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ ISO8601DateFormatter –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
                        let iso8601Formatter = ISO8601DateFormatter()
                        iso8601Formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
                        
                        if let date = iso8601Formatter.date(from: dateStr) {
                            print("‚úÖ [PATCH] –£—Å–ø—ñ—à–Ω–æ –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ –∑ ISO8601 (–∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞–º–∏): \(date)")
                            return date
                        }
                        
                        // –Ø–∫—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
                        iso8601Formatter.formatOptions = [.withInternetDateTime]
                        
                        if let date = iso8601Formatter.date(from: dateStr) {
                            print("‚úÖ [PATCH] –£—Å–ø—ñ—à–Ω–æ –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ –∑ ISO8601 (–±–µ–∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥): \(date)")
                            return date
                        }
                        
                        // –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É
                        let formatters = [
                            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
                            "yyyy-MM-dd'T'HH:mm:ss'Z'",
                            "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
                            "yyyy-MM-dd'T'HH:mm:ssZ",
                            "yyyy-MM-dd'T'HH:mm:ss"
                        ].map { format -> DateFormatter in
                            let formatter = DateFormatter()
                            formatter.dateFormat = format
                            formatter.locale = Locale(identifier: "en_US_POSIX")
                            formatter.timeZone = TimeZone(secondsFromGMT: 0)
                            return formatter
                        }
                        
                        for formatter in formatters {
                            if let date = formatter.date(from: dateStr) {
                                return date
                            }
                        }
                        throw DecodingError.dataCorruptedError(
                            in: container,
                            debugDescription: "Expected date string to be ISO8601-formatted."
                        )
                    }
                    
                    return try decoder.decode(U.self, from: data)
                } catch {
                    throw APIError.decodingFailed(error)
                }
            } else {
                // –°–ø—Ä–æ–±—É—î–º–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
                do {
                    let errorResponse = try JSONDecoder().decode(ErrorResponse.self, from: data)
                    throw APIError.serverError(statusCode: httpResponse.statusCode, message: errorResponse.message)
                } catch {
                    throw APIError.serverError(statusCode: httpResponse.statusCode, message: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
                }
            }
        } catch let error as APIError {
            throw error
        } catch {
            throw APIError.requestFailed(error)
        }
    }
    
    // DELETE method for deleting resources
    func delete<T: Decodable>(endpoint: String, requiresAuth: Bool = true) async throws -> T {
        var urlRequest = try createRequest(for: endpoint, method: "DELETE", requiresAuth: requiresAuth)
        return try await performRequest(urlRequest)
    }
    
    // MARK: - Helper Methods
    
    private func createRequest(for endpoint: String, method: String, requiresAuth: Bool) throws -> URLRequest {
        // Make sure URL starts with "/" if not provided
        let formattedEndpoint = endpoint.hasPrefix("/") ? endpoint : "/\(endpoint)"
        
        guard let url = URL(string: baseURL + formattedEndpoint) else {
            throw APIError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = method
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        if requiresAuth {
            guard let token = accessToken else {
                throw APIError.unauthorized
            }
            request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        
        return request
    }
    
    private func performRequest<T: Decodable>(_ request: URLRequest) async throws -> T {
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            return try handleResponse(data: data, response: response)
        } catch let error as APIError {
            throw error
        } catch {
            throw APIError.requestFailed(error)
        }
    }
    
    private func performRequestWithBody<T: Encodable, U: Decodable>(_ request: URLRequest, body: T) async throws -> U {
        var request = request
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .iso8601
        
        do {
            request.httpBody = try encoder.encode(body)
            let (data, response) = try await URLSession.shared.data(for: request)
            return try handleResponse(data: data, response: response)
        } catch let error as APIError {
            throw error
        } catch {
            throw APIError.requestFailed(error)
        }
    }
    
    private func handleResponse<T: Decodable>(data: Data, response: URLResponse) throws -> T {
        guard let httpResponse = response as? HTTPURLResponse else {
            throw APIError.invalidResponse
        }
        
        switch httpResponse.statusCode {
        case 200...299:
            do {
                // JSON –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è production
                
                let decoder = JSONDecoder()
                decoder.dateDecodingStrategy = .iso8601
                decoder.keyDecodingStrategy = .useDefaultKeys
                
                // –î–æ–¥–∞–º–æ –æ–±—Ä–æ–±–∫—É –¥–∞—Ç —É —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
                dateFormatter.locale = Locale(identifier: "en_US_POSIX")
                
                decoder.dateDecodingStrategy = .custom { decoder in
                    let container = try decoder.singleValueContainer()
                    let dateStr = try container.decode(String.self)
                    
                    print("üïê –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –¥–∞—Ç—É: '\(dateStr)'")
                    
                    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ ISO8601DateFormatter –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
                    let iso8601Formatter = ISO8601DateFormatter()
                    iso8601Formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
                    
                    if let date = iso8601Formatter.date(from: dateStr) {
                        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ –∑ ISO8601 (–∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞–º–∏): \(date)")
                        return date
                    }
                    
                    // –Ø–∫—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
                    iso8601Formatter.formatOptions = [.withInternetDateTime]
                    
                    if let date = iso8601Formatter.date(from: dateStr) {
                        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ –∑ ISO8601 (–±–µ–∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥): \(date)")
                        return date
                    }
                    
                    // –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É
                    let formatters = [
                        "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
                        "yyyy-MM-dd'T'HH:mm:ss'Z'",
                        "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
                        "yyyy-MM-dd'T'HH:mm:ssZ",
                        "yyyy-MM-dd'T'HH:mm:ss"
                    ].map { format -> DateFormatter in
                        let formatter = DateFormatter()
                        formatter.dateFormat = format
                        formatter.locale = Locale(identifier: "en_US_POSIX")
                        formatter.timeZone = TimeZone(secondsFromGMT: 0)
                        return formatter
                    }
                    
                    for (index, formatter) in formatters.enumerated() {
                        if let date = formatter.date(from: dateStr) {
                            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ –∑ —Ñ–æ—Ä–º–∞—Ç—É #\(index): \(date)")
                            return date
                        }
                    }
                    
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –¥–∞—Ç—É: '\(dateStr)'")
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Expected date string to be ISO8601-formatted."
                    )
                }
                
                return try decoder.decode(T.self, from: data)
            } catch {
                // –ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
                print("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è: \(error)")
                if let decodingError = error as? DecodingError {
                    switch decodingError {
                    case .keyNotFound(let key, let context):
                        print("–ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: \(key), —à–ª—è—Ö: \(context.codingPath), \(context.debugDescription)")
                    case .valueNotFound(let type, let context):
                        print("–ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: \(type), —à–ª—è—Ö: \(context.codingPath), \(context.debugDescription)")
                    case .typeMismatch(let type, let context):
                        print("–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∏–ø—É: \(type), —à–ª—è—Ö: \(context.codingPath), \(context.debugDescription)")
                    case .dataCorrupted(let context):
                        print("–î–∞–Ω—ñ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ: \(context.debugDescription), —à–ª—è—Ö: \(context.codingPath)")
                    @unknown default:
                        print("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è")
                    }
                }
                throw APIError.decodingFailed(error)
            }
        case 401:
            throw APIError.unauthorized
        default:
            // –í–∏–≤–æ–¥–∏–º–æ JSON –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if let jsonString = String(data: data, encoding: .utf8) {
                print("Error JSON response: \(jsonString)")
            }
            
            do {
                let errorResponse = try JSONDecoder().decode(ErrorResponse.self, from: data)
                print("Parsed error message: \(errorResponse.message)")
                throw APIError.serverError(statusCode: httpResponse.statusCode, message: errorResponse.message)
            } catch let apiError as APIError {
                throw apiError
            } catch {
                print("Error parsing error response: \(error)")
                
                // –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è ErrorResponse
                do {
                    // –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ JSON –≤—Ä—É—á–Ω—É
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        if let messageArray = json["message"] as? [String], !messageArray.isEmpty {
                            let message = messageArray.joined(separator: ", ")
                            throw APIError.serverError(statusCode: httpResponse.statusCode, message: message)
                        } else if let message = json["message"] as? String {
                            throw APIError.serverError(statusCode: httpResponse.statusCode, message: message)
                        } else {
                            throw APIError.serverError(statusCode: httpResponse.statusCode, message: "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                        }
                    } else {
                        throw APIError.serverError(statusCode: httpResponse.statusCode, message: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                    }
                } catch let jsonError as APIError {
                    throw jsonError
                } catch {
                    throw APIError.simpleServerError(message: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞")
                }
            }
        }
    }
    
    // MARK: - File Upload Helper Methods

    func mimeType(for extension: String) -> String {
        switch `extension`.lowercased() {
        case "jpg", "jpeg":
            return "image/jpeg"
        case "png":
            return "image/png"
        case "gif":
            return "image/gif"
        case "pdf":
            return "application/pdf"
        default:
            return "application/octet-stream"
        }
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç—É—î UIImage –≤ Data –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º —ñ —è–∫—ñ—Å—Ç—é
    func compressImage(_ image: UIImage, format: ImageFormat = .jpeg, compressionQuality: CGFloat = 0.8) -> Data? {
        switch format {
        case .jpeg:
            return image.jpegData(compressionQuality: compressionQuality)
        case .png:
            return image.pngData()
        }
    }

    enum ImageFormat {
        case jpeg
        case png
    }
    
    // MARK: - Token Refresh
    
    func refreshAuthToken() async throws -> Bool {
        guard let refreshToken = refreshToken else {
            return false
        }
        
        struct RefreshTokenRequest: Codable {
            let refreshToken: String
        }
        
        struct TokenResponse: Codable {
            let access_token: String
            let refresh_token: String
        }
        
        do {
            let request = RefreshTokenRequest(refreshToken: refreshToken)
            let response: TokenResponse = try await post(endpoint: "/auth/refresh", body: request, requiresAuth: false)
            saveTokens(accessToken: response.access_token, refreshToken: response.refresh_token)
            return true
        } catch {
            clearTokens()
            return false
        }
    }
}
