import Foundation
import Combine

// MARK: - NetworkError enum
enum NetworkError: Error {
    case invalidURL
    case serverError
    case unauthorized
    case noInternetConnection
    case decodingError
    case unknown
}

protocol OrderHistoryServiceProtocol {
    func fetchOrderHistory(
        statuses: [OrderStatus]?,
        limit: Int?,
        page: Int?
    ) -> AnyPublisher<[OrderHistory], NetworkError>
    
    func fetchActiveOrders(
        limit: Int?,
        page: Int?
    ) -> AnyPublisher<[OrderHistory], NetworkError>
    
    func fetchOrderDetails(orderId: String) -> AnyPublisher<OrderHistory, NetworkError>
    func fetchOrderPaymentStatus(orderId: String) -> AnyPublisher<OrderPaymentInfo, NetworkError>
}

class OrderHistoryService: OrderHistoryServiceProtocol {
    private let networkService = NetworkService.shared
    
    func fetchOrderHistory(
        statuses: [OrderStatus]? = nil,
        limit: Int? = 20,
        page: Int? = 1
    ) -> AnyPublisher<[OrderHistory], NetworkError> {
        
        return Future { promise in
            Task {
                do {
                    var endpoint = "/orders/my/history"
                    var queryItems: [String] = []
        
        if let statuses = statuses {
            for status in statuses {
                            queryItems.append("status[]=\(status.rawValue)")
            }
        }
        
        if let limit = limit {
                        queryItems.append("limit=\(limit)")
        }
        
        if let page = page {
                        queryItems.append("page=\(page)")
                    }
                    
                    if !queryItems.isEmpty {
                        endpoint += "?" + queryItems.joined(separator: "&")
                    }
                    
                    // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                    print("üîç OrderHistoryService: –ó–∞–ø–∏—Ç –¥–æ \(endpoint)")
                    print("üìä OrderHistoryService: –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç—É:")
                    print("   - –ü–æ–≤–Ω–∏–π URL: \(self.networkService.getBaseURL())\(endpoint)")
                    print("   - –°—Ç–∞—Ç—É—Å–∏ —Ñ—ñ–ª—å—Ç—Ä—É: \(statuses?.map { $0.rawValue } ?? ["–≤—Å—ñ"])")
                    print("   - –°—Ç–æ—Ä—ñ–Ω–∫–∞: \(page ?? 1), –õ—ñ–º—ñ—Ç: \(limit ?? 20)")
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                    if let token = UserDefaults.standard.string(forKey: "accessToken") {
                        print("üîë OrderHistoryService: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É —î (–¥–æ–≤–∂–∏–Ω–∞: \(token.count))")
                        print("üîë OrderHistoryService: –¢–æ–∫–µ–Ω –ø–æ—á–∞—Ç–æ–∫: \(String(token.prefix(20)))...")
                    } else {
                        print("‚ùå OrderHistoryService: –¢–û–ö–ï–ù –î–û–°–¢–£–ü–£ –í–Ü–î–°–£–¢–ù–Ü–ô!")
                    }
                    
                    let result: [OrderHistory] = try await self.networkService.fetch(endpoint: endpoint)
                    
                    print("‚úÖ OrderHistoryService: –û—Ç—Ä–∏–º–∞–Ω–æ \(result.count) –∑–∞–º–æ–≤–ª–µ–Ω—å")
                    
                    // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤–∏ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–≤'—è—Ä–Ω—ñ
                    for order in result {
                        CustomizationNameService.shared.extractNamesFromOrder(order)
                        
                        // –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –∫–∞–≤'—è—Ä–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—è, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ó—ó
                        if order.coffeeShopName == nil && order.coffeeShop == nil {
                            Task {
                                await self.loadCoffeeShopInfo(for: order.coffeeShopId)
                            }
                        }
                    }
                    
                    // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è production
                    
                    promise(.success(result))
                } catch {
                    print("‚ùå OrderHistoryService: –ü–æ–º–∏–ª–∫–∞ - \(error)")
                    print("üîç OrderHistoryService: –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: \(type(of: error))")
                    if let apiError = error as? APIError {
                        print("üîç OrderHistoryService: API –ø–æ–º–∏–ª–∫–∞: \(apiError)")
                    }
                    promise(.failure(NetworkError.serverError))
                }
            }
        }
                .eraseToAnyPublisher()
        }
        
    func fetchActiveOrders(
        limit: Int? = 20,
        page: Int? = 1
    ) -> AnyPublisher<[OrderHistory], NetworkError> {
        
        return Future { promise in
            Task {
                do {
                    // –ó–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /orders/my
                    var endpoint = "/orders/my"
                    var queryItems: [String] = []
                    
                    if let limit = limit {
                        queryItems.append("limit=\(limit)")
                    }
                    
                    if let page = page {
                        queryItems.append("page=\(page)")
                    }
                    
                    if !queryItems.isEmpty {
                        endpoint += "?" + queryItems.joined(separator: "&")
                    }
                    
                    print("üîç OrderHistoryService: –ó–∞–ø–∏—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–æ \(endpoint)")
                    print("üìä OrderHistoryService: –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:")
                    print("   - –ü–æ–≤–Ω–∏–π URL: \(self.networkService.getBaseURL())\(endpoint)")
                    print("   - –°—Ç–æ—Ä—ñ–Ω–∫–∞: \(page ?? 1), –õ—ñ–º—ñ—Ç: \(limit ?? 20)")
                    
                    let result: [OrderHistory] = try await self.networkService.fetch(endpoint: endpoint)
                    
                    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è production
                    
                    promise(.success(result))
                } catch {
                    print("‚ùå OrderHistoryService: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å - \(error)")
                    promise(.failure(NetworkError.serverError))
                }
            }
            }
            .eraseToAnyPublisher()
    }
    
    func fetchOrderDetails(orderId: String) -> AnyPublisher<OrderHistory, NetworkError> {
        return Future { promise in
            Task {
                do {
                    let result: OrderHistory = try await self.networkService.fetch(endpoint: "/orders/\(orderId)")
                    promise(.success(result))
                } catch {
                    promise(.failure(NetworkError.serverError))
                }
            }
            }
            .eraseToAnyPublisher()
    }
    
    func fetchOrderPaymentStatus(orderId: String) -> AnyPublisher<OrderPaymentInfo, NetworkError> {
        return Future { promise in
            Task {
                do {
                    let response: OrderPaymentStatusResponse = try await self.networkService.fetch(endpoint: "/orders/\(orderId)/payment-status")
                    
                    let paymentInfo = OrderPaymentInfo(
                    id: response.paymentId ?? "",
                    status: PaymentStatus(rawValue: response.status) ?? .pending,
                    amount: response.paidAmount,
                    method: nil,
                    transactionId: nil,
                    createdAt: "",
                    completedAt: nil,
                    paymentUrl: nil
                )
                    
                    promise(.success(paymentInfo))
                } catch {
                    promise(.failure(NetworkError.serverError))
                }
            }
            }
            .eraseToAnyPublisher()
    }
    
    // MARK: - –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    
    private func loadCoffeeShopInfo(for coffeeShopId: String) async {
        do {
            struct CoffeeShopInfo: Codable {
                let id: String
                let name: String
                let address: String?
            }
            
            let coffeeShop: CoffeeShopInfo = try await networkService.fetch(endpoint: "/coffee-shops/\(coffeeShopId)")
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–µ—à—ñ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ
            DispatchQueue.main.async {
                CoffeeShopCache.shared.setCoffeeShop(coffeeShop.id, name: coffeeShop.name, address: coffeeShop.address)
            }
            
        } catch {
            print("‚ùå OrderHistoryService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–≤'—è—Ä–Ω—ñ \(coffeeShopId): \(error)")
        }
    }
    
    // MARK: - –ú–µ—Ç–æ–¥–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    
    func diagnoseFetchIssue() async {
        print("üîç OrderHistoryService: –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏")
        
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await diagnoseUserInfo()
        
        // 2. –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ endpoints
        await testDifferentEndpoints()
        
        // 3. –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await testSpecificOrder("90ae80b5-b06a-4554-9d97-63d0e0587239")
        
        // 4. –ù–û–í–ò–ô: –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
        await testRecentOrders()
    }
    
    private func diagnoseUserInfo() async {
        print("\nüë§ OrderHistoryService: –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        do {
            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            struct UserProfile: Codable {
                let id: String
                let email: String
                let firstName: String?
                let lastName: String?
                let roles: [UserRole]?
            }
            
            struct UserRole: Codable {
                let name: String
                let description: String
            }
            
            let profile: UserProfile = try await networkService.fetch(endpoint: "/user/profile")
            print("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ:")
            print("   - ID: \(profile.id)")
            print("   - Email: \(profile.email)")
            print("   - –Ü–º'—è: \(profile.firstName ?? "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")")
            print("   - –ü—Ä—ñ–∑–≤–∏—â–µ: \(profile.lastName ?? "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")")
            print("   - –†–æ–ª—ñ: \(profile.roles?.map { $0.name } ?? ["–Ω–µ–º–∞—î"])")
            
            if let roles = profile.roles {
                for role in roles {
                    print("     - \(role.name): \(role.description)")
                }
            }
            
        } catch {
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: \(error)")
        }
    }
    
    private func testDifferentEndpoints() async {
        print("\nüß™ OrderHistoryService: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö endpoints")
        
        let endpoints = [
            "/orders/my",
            "/orders/my/history",
            "/orders/my?limit=50",
            "/orders/my/history?limit=50",
            "/orders/my/history?status[]=completed",
            "/orders/my/history?status[]=cancelled",
            "/orders/my?status[]=created&status[]=pending"
        ]
        
        for endpoint in endpoints {
            print("\nüîó –¢–µ—Å—Ç—É—é endpoint: \(endpoint)")
            do {
                let result: [OrderHistory] = try await networkService.fetch(endpoint: endpoint)
                print("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: \(result.count) –∑–∞–º–æ–≤–ª–µ–Ω—å")
                if !result.isEmpty {
                    print("   –ü–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: \(result[0].orderNumber) (\(result[0].status.rawValue))")
                }
            } catch {
                print("‚ùå –ü–æ–º–∏–ª–∫–∞: \(error)")
            }
        }
    }
    
    private func testSpecificOrder(_ orderId: String) async {
        print("\nüéØ OrderHistoryService: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        print("   ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: \(orderId)")
        
        do {
            let order: OrderHistory = try await networkService.fetch(endpoint: "/orders/\(orderId)")
            print("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ:")
            print("   - –ù–æ–º–µ—Ä: \(order.orderNumber)")
            print("   - –°—Ç–∞—Ç—É—Å: \(order.status.rawValue)")
            print("   - –°—É–º–∞: \(order.totalAmount) ‚Ç¥")
            print("   - –û–ø–ª–∞—á–µ–Ω–æ: \(order.isPaid)")
            print("   - –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: \(order.formattedCreatedDate)")
        } catch {
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: \(error)")
        }
    }
    
    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
    private func testRecentOrders() async {
        print("\nüÜï OrderHistoryService: –ü–æ—à—É–∫ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å")
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        do {
            let activeOrders: [OrderHistory] = try await networkService.fetch(endpoint: "/orders/my?limit=50")
            print("üü¢ –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: \(activeOrders.count)")
            
            let recentActive = activeOrders.filter { order in
                // –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏
                if let date = ISO8601DateFormatter().date(from: order.createdAt) {
                    return Date().timeIntervalSince(date) < 7200 // 2 –≥–æ–¥–∏–Ω–∏
                }
                return false
            }
            
            if !recentActive.isEmpty {
                print("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ \(recentActive.count) –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:")
                for order in recentActive {
                    print("   - \(order.orderNumber): \(order.status.rawValue) (\(order.totalAmount) ‚Ç¥)")
                }
            } else {
                print("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏")
            }
        } catch {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: \(error)")
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        do {
            let historyOrders: [OrderHistory] = try await networkService.fetch(endpoint: "/orders/my/history?limit=50")
            print("üìö –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: \(historyOrders.count)")
            
            let recentHistory = historyOrders.filter { order in
                if let date = ISO8601DateFormatter().date(from: order.createdAt) {
                    return Date().timeIntervalSince(date) < 7200 // 2 –≥–æ–¥–∏–Ω–∏
                }
                return false
            }
            
            if !recentHistory.isEmpty {
                print("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ \(recentHistory.count) –Ω–æ–≤–∏—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:")
                for order in recentHistory {
                    print("   - \(order.orderNumber): \(order.status.rawValue) (\(order.totalAmount) ‚Ç¥)")
                }
            }
        } catch {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: \(error)")
        }
    }
}

// MARK: - Supporting Types

struct OrderPaymentStatusResponse: Codable {
    let orderId: String
    let paymentId: String?
    let status: String
    let paidAmount: Double
    let isPaid: Bool
    let paymentUrl: String?
}

enum HTTPMethod: String {
    case GET = "GET"
    case POST = "POST"
    case PATCH = "PATCH"
    case DELETE = "DELETE"
}

// MARK: - Mock Service –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

class MockOrderHistoryService: OrderHistoryServiceProtocol {
    func fetchOrderHistory(
        statuses: [OrderStatus]?,
        limit: Int?,
        page: Int?
    ) -> AnyPublisher<[OrderHistory], NetworkError> {
        
        let mockOrders = createMockOrderHistory()
        
        return Just(mockOrders)
            .setFailureType(to: NetworkError.self)
            .eraseToAnyPublisher()
    }
    
    func fetchActiveOrders(
        limit: Int?,
        page: Int?
    ) -> AnyPublisher<[OrderHistory], NetworkError> {
        
        let mockOrders = createMockOrderHistory().filter { 
            [OrderStatus.created, .pending, .accepted, .preparing, .ready].contains($0.status)
        }
        
        return Just(mockOrders)
            .setFailureType(to: NetworkError.self)
            .eraseToAnyPublisher()
    }
    
    func fetchOrderDetails(orderId: String) -> AnyPublisher<OrderHistory, NetworkError> {
        let mockOrder = createMockOrderHistory().first!
        
        return Just(mockOrder)
            .setFailureType(to: NetworkError.self)
            .eraseToAnyPublisher()
    }
    
    func fetchOrderPaymentStatus(orderId: String) -> AnyPublisher<OrderPaymentInfo, NetworkError> {
        let mockPayment = OrderPaymentInfo(
            id: "payment-1",
            status: .completed,
            amount: 120.0,
            method: "card",
            transactionId: "txn-123",
            createdAt: "2023-05-20T14:30:00Z",
            completedAt: "2023-05-20T14:32:00Z",
            paymentUrl: nil
        )
        
        return Just(mockPayment)
            .setFailureType(to: NetworkError.self)
            .eraseToAnyPublisher()
    }
    
    private func createMockOrderHistory() -> [OrderHistory] {
        return [
            OrderHistory(
                id: "order-1",
                orderNumber: "CAF-\(Date().timeIntervalSince1970)",
                status: OrderStatus.completed,
                totalAmount: 195.0,
                coffeeShopId: "shop-1",
                coffeeShopName: "Coffee House Central",
                coffeeShop: CoffeeShopInfo(
                    id: "shop-1",
                    name: "Coffee House Central",
                    address: "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1"
                ),
                isPaid: true,
                createdAt: "2023-12-01T10:30:00Z",
                completedAt: "2023-12-01T11:00:00Z",
                items: [
                    OrderHistoryItem(
                        id: "item-1",
                        name: "–ö–∞–ø—É—á–∏–Ω–æ",
                        price: 95.0,
                        basePrice: 70.0,
                        finalPrice: 95.0,
                        quantity: 1,
                        customization: OrderItemCustomization(
                            selectedIngredients: nil,
                            selectedOptions: nil,
                            selectedSizeData: nil,
                            customizationDetails: CustomizationDetails(
                                size: CustomizationSizeDetail(name: "–í–µ–ª–∏–∫–∏–π", price: 10.0),
                                options: [
                                    CustomizationOptionDetail(
                                        name: "–í–∞–Ω—ñ–ª—å–Ω–∏–π —Å–∏—Ä–æ–ø",
                                        price: 15.0,
                                        totalPrice: 15.0,
                                        quantity: 1
                                    )
                                ]
                            ),
                            customizationSummary: "–†–æ–∑–º—ñ—Ä: –í–µ–ª–∏–∫–∏–π (+10.00 ‚Ç¥) | –í–∞–Ω—ñ–ª—å–Ω–∏–π —Å–∏—Ä–æ–ø (+15.00 ‚Ç¥)"
                        ),
                        sizeName: "–í–µ–ª–∏–∫–∏–π"
                    ),
                    OrderHistoryItem(
                        id: "item-2",
                        name: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
                        price: 50.0,
                        basePrice: 50.0,
                        finalPrice: 50.0,
                        quantity: 2,
                        customization: OrderItemCustomization(
                            customizationSummary: "–ë–µ–∑ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ–π"
                        ),
                        sizeName: "–°–µ—Ä–µ–¥–Ω—ñ–π"
                    )
                ],
                statusHistory: [
                    OrderStatusHistoryItem(
                        id: "history-1",
                        status: OrderStatus.created,
                        comment: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                        createdAt: "2023-12-01T10:30:00Z",
                        createdBy: String?.none
                    ),
                    OrderStatusHistoryItem(
                        id: "history-2",
                        status: OrderStatus.completed,
                        comment: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        createdAt: "2023-12-01T11:00:00Z",
                        createdBy: "–ë–∞—Ä–∏—Å—Ç–∞ –ú–∞—Ä—ñ—è"
                    )
                ],
                payment: OrderPaymentInfo(
                    id: "payment-1",
                    status: .completed,
                    amount: 195.0,
                    method: "Monobank",
                    transactionId: "TXN123456",
                    createdAt: "2023-12-01T10:31:00Z",
                    completedAt: "2023-12-01T10:32:00Z",
                    paymentUrl: nil
                )
            )
        ]
    }
}