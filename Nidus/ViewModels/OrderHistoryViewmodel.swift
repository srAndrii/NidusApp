import Foundation
import Combine
import SwiftUI

@MainActor
class OrderHistoryViewModel: ObservableObject {
    @Published var orders: [OrderHistory] = []
    @Published var isLoading = false
    @Published var isLoadingMore = false
    @Published var error: String?
    @Published var selectedFilter: OrderHistoryFilter = .all
    @Published var searchText = ""
    @Published var showingOrderDetails = false
    @Published var selectedOrder: OrderHistory?
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Å–µ—Ä–≤—ñ—Å –∑–∞–º—ñ—Å—Ç—å mock
    private let orderHistoryServiceProtocol: OrderHistoryServiceProtocol = OrderHistoryService()
    
    // –ü—É–±–ª—ñ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    var orderHistoryService: OrderHistoryService {
        return orderHistoryServiceProtocol as! OrderHistoryService
    }
    private var cancellables = Set<AnyCancellable>()
    private var currentPage = 1
    private var hasMoreData = true
    private let pageSize = 20
    
    init() {
        setupSearchDebounce()
        setupOrderCreationListener()
        loadOrderHistory()
    }
    
    // MARK: - Public Methods
    
    func loadOrderHistory() {
        guard !isLoading else { return }
        
        isLoading = true
        error = nil
        currentPage = 1
        hasMoreData = true
        
        fetchOrders(page: currentPage, isLoadMore: false)
    }
    
    func loadMoreOrdersIfNeeded() {
        guard !isLoadingMore && hasMoreData else { return }
        
        isLoadingMore = true
        currentPage += 1
        fetchOrders(page: currentPage, isLoadMore: true)
    }
    
    func refreshOrders() {
        loadOrderHistory()
    }
    
    func filterChanged(to filter: OrderHistoryFilter) {
        selectedFilter = filter
        loadOrderHistory()
    }
    
    func selectOrder(_ order: OrderHistory) {
        selectedOrder = order
        showingOrderDetails = true
    }
    
    func searchOrders(with text: String) {
        searchText = text
        // –ü–æ—à—É–∫ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ debounce
    }
    
    // MARK: - Computed Properties
    
    var filteredOrders: [OrderHistory] {
        var filtered = orders
        
        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
        if let statuses = selectedFilter.statuses {
            filtered = filtered.filter { statuses.contains($0.status) }
        }
        
        // –ü–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        if !searchText.isEmpty {
            filtered = filtered.filter { order in
                order.orderNumber.localizedCaseInsensitiveContains(searchText) ||
                order.coffeeShopName?.localizedCaseInsensitiveContains(searchText) == true ||
                order.items.contains { item in
                    item.name.localizedCaseInsensitiveContains(searchText)
                }
            }
        }
        
        return filtered
    }
    
    var hasOrders: Bool {
        !orders.isEmpty
    }
    
    var isEmptyState: Bool {
        !isLoading && orders.isEmpty
    }
    
    // MARK: - Private Methods
    
    private func fetchOrders(page: Int, isLoadMore: Bool) {
        let statuses = selectedFilter.statuses
        
        print("üîÑ OrderHistoryViewModel: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å - —Ñ—ñ–ª—å—Ç—Ä: \(selectedFilter.displayName), —Å—Ç–æ—Ä—ñ–Ω–∫–∞: \(page)")
        
        // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        if selectedFilter == .all {
            // –î–ª—è "–í—Å—ñ" –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —è–∫ –∞–∫—Ç–∏–≤–Ω—ñ, —Ç–∞–∫ —ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            fetchAllOrders(page: page, isLoadMore: isLoadMore)
            return
        }
        
        // –í–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
        let publisher: AnyPublisher<[OrderHistory], NetworkError>
        
        if selectedFilter == .pending {
            // –î–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–≤ –æ–±—Ä–æ–±—Ü—ñ) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /orders/my
            publisher = orderHistoryServiceProtocol.fetchActiveOrders(
                limit: pageSize,
                page: page
            )
        } else {
            // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö/—Å–∫–∞—Å–æ–≤–∞–Ω–∏—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /orders/my/history
            publisher = orderHistoryServiceProtocol.fetchOrderHistory(
                statuses: statuses,
                limit: pageSize,
                page: page
            )
        }
        
        publisher
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] (completion: Subscribers.Completion<NetworkError>) in
                    switch completion {
                    case .finished:
                        break
                    case .failure(let error):
                        self?.handleError(error)
                    }
                    
                    self?.isLoading = false
                    self?.isLoadingMore = false
                },
                receiveValue: { [weak self] newOrders in
                    self?.handleOrdersReceived(newOrders, isLoadMore: isLoadMore)
                }
            )
            .store(in: &cancellables)
    }
    
    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–∞–∫—Ç–∏–≤–Ω—ñ + —ñ—Å—Ç–æ—Ä—ñ—è)
    private func fetchAllOrders(page: Int, isLoadMore: Bool) {
        // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—é (–∞–∫—Ç–∏–≤–Ω—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ)
        if page > 1 {
            orderHistoryServiceProtocol.fetchOrderHistory(
                statuses: nil,
                limit: pageSize,
                page: page - 1 // –ö–æ—Ä–∏–≥—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
            )
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    switch completion {
                    case .finished:
                        break
                    case .failure(let error):
                        self?.handleError(error)
                    }
                    
                    self?.isLoadingMore = false
                },
                receiveValue: { [weak self] historyOrders in
                    if isLoadMore {
                        self?.orders.append(contentsOf: historyOrders)
                    }
                    self?.hasMoreData = historyOrders.count == self?.pageSize
                }
            )
            .store(in: &cancellables)
            return
        }
        
        // –î–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        let activeOrdersPublisher = orderHistoryServiceProtocol.fetchActiveOrders(limit: pageSize, page: 1)
        let historyOrdersPublisher = orderHistoryServiceProtocol.fetchOrderHistory(
            statuses: nil,
            limit: pageSize,
            page: 1
        )
        
        Publishers.CombineLatest(activeOrdersPublisher, historyOrdersPublisher)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    switch completion {
                    case .finished:
                        break
                    case .failure(let error):
                        self?.handleError(error)
                    }
                    
                    self?.isLoading = false
                },
                receiveValue: { [weak self] (activeOrders, historyOrders) in
                    print("‚úÖ OrderHistoryViewModel: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ \(activeOrders.count) –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∞ \(historyOrders.count) —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å")
                    
                    // –û–±'—î–¥–Ω—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: —Å–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤–Ω—ñ, –ø–æ—Ç—ñ–º —ñ—Å—Ç–æ—Ä—ñ—è
                    let allOrders = activeOrders + historyOrders
                    
                    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
                    let sortedOrders = allOrders.sorted { first, second in
                        let firstDate = ISO8601DateFormatter().date(from: first.createdAt) ?? Date.distantPast
                        let secondDate = ISO8601DateFormatter().date(from: second.createdAt) ?? Date.distantPast
                        return firstDate > secondDate
                    }
                    
                    if isLoadMore {
                        self?.orders.append(contentsOf: sortedOrders)
                    } else {
                        self?.orders = sortedOrders
                    }
                    
                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ hasMoreData –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
                    self?.hasMoreData = historyOrders.count == self?.pageSize
                    self?.error = nil
                }
            )
            .store(in: &cancellables)
    }
    
    private func handleOrdersReceived(_ newOrders: [OrderHistory], isLoadMore: Bool) {
        if isLoadMore {
            orders.append(contentsOf: newOrders)
        } else {
            orders = newOrders
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –¥–∞–Ω—ñ
        hasMoreData = newOrders.count == pageSize
        
        error = nil
    }
    
    private func handleError(_ networkError: NetworkError) {
        switch networkError {
        case .unauthorized:
            error = "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
        case .noInternetConnection:
            error = "–ù–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è"
        case .serverError:
            error = "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        case .decodingError:
            error = "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö"
        default:
            error = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ"
        }
    }
    
    private func setupSearchDebounce() {
        $searchText
            .debounce(for: .milliseconds(500), scheduler: RunLoop.main)
            .removeDuplicates()
            .sink { _ in
                // –ü–æ—à—É–∫ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ filteredOrders
            }
            .store(in: &cancellables)
    }
    
    private func setupOrderCreationListener() {
        // –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
        NotificationCenter.default.publisher(for: Notification.Name("OrderCreated"))
            .debounce(for: .seconds(2), scheduler: RunLoop.main) // –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± —Å–µ—Ä–≤–µ—Ä –≤—Å—Ç–∏–≥ –æ–±—Ä–æ–±–∏—Ç–∏
            .sink { [weak self] _ in
                print("üîî OrderHistoryViewModel: –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫")
                self?.refreshOrders()
            }
            .store(in: &cancellables)
        
        // –¢–∞–∫–æ–∂ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω—å
        NotificationCenter.default.publisher(for: Notification.Name("OrderStatusUpdated"))
            .debounce(for: .seconds(1), scheduler: RunLoop.main)
            .sink { [weak self] _ in
                print("üîî OrderHistoryViewModel: –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É - –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫")
                self?.refreshOrders()
            }
            .store(in: &cancellables)
    }
}

// MARK: - Order Details ViewModel

@MainActor
class OrderDetailsViewModel: ObservableObject {
    @Published var order: OrderHistory
    @Published var paymentInfo: OrderPaymentInfo?
    @Published var isLoadingPayment = false
    @Published var error: String?
    
    private let orderHistoryService: OrderHistoryServiceProtocol
    private var cancellables = Set<AnyCancellable>()
    
    init(order: OrderHistory, orderHistoryService: OrderHistoryServiceProtocol = OrderHistoryService()) {
        self.order = order
        self.orderHistoryService = orderHistoryService
        self.paymentInfo = order.payment
        
        // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤–∏ –∑ —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ
        Task {
            // –°–ø–æ—á–∞—Ç–∫—É –≤–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            CustomizationNameService.shared.extractNamesFromOrder(order)
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–∑–≤–∏ –∑ API —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            await loadCustomizationNamesIfNeeded()
            
            // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await MainActor.run {
                self.objectWillChange.send()
            }
        }
        
        if paymentInfo == nil {
            loadPaymentInfo()
        }
    }
    
    // MARK: - Public Methods
    
    func loadPaymentInfo() {
        guard !isLoadingPayment else { return }
        
        isLoadingPayment = true
        error = nil
        
        orderHistoryService.fetchOrderPaymentStatus(orderId: order.id)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    switch completion {
                    case .finished:
                        break
                    case .failure(let error):
                        self?.handleError(error)
                    }
                    
                    self?.isLoadingPayment = false
                },
                receiveValue: { [weak self] payment in
                    self?.paymentInfo = payment
                    self?.error = nil
                }
            )
            .store(in: &cancellables)
    }
    
    func refreshPaymentInfo() {
        loadPaymentInfo()
    }
    
    func refreshCustomizationNames() {
        Task {
            // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤–∏ –∑ —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            CustomizationNameService.shared.extractNamesFromOrder(order)
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–∑–≤–∏ –∑ API
            await loadCustomizationNamesIfNeeded()
            
            // –¢–∞–∫–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–≤'—è—Ä–Ω—é, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            if order.coffeeShopName == nil && order.coffeeShop == nil {
                await loadCoffeeShopInfo()
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await MainActor.run {
                self.objectWillChange.send()
            }
        }
    }
    
    private func loadCustomizationNamesIfNeeded() async {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏
        var needsLoading = false
        
        for item in order.items {
            if let customization = item.customization {
                // –Ø–∫—â–æ —î selectedIngredients –∑ ID, –∞–ª–µ –Ω–µ–º–∞—î –Ω–∞–∑–≤
                if let ingredients = customization.selectedIngredients {
                    for ingredientId in ingredients.keys {
                        if CustomizationNameService.shared.getIngredientName(for: ingredientId) == nil {
                            needsLoading = true
                            break
                        }
                    }
                }
                
                // –Ø–∫—â–æ —î selectedOptions –∑ ID, –∞–ª–µ –Ω–µ–º–∞—î –Ω–∞–∑–≤
                if let options = customization.selectedOptions {
                    for (_, choices) in options {
                        for choice in choices {
                            if choice.name == nil && CustomizationNameService.shared.getOptionName(for: choice.id) == nil {
                                needsLoading = true
                                break
                            }
                        }
                        if needsLoading { break }
                    }
                }
            }
            if needsLoading { break }
        }
        
        if needsLoading {
            print("üîÑ OrderDetailsViewModel: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–∑–≤–∏ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ–π –∑ –º–µ–Ω—é")
            await CustomizationNameService.shared.loadNamesFromCoffeeShop(order.coffeeShopId)
        } else {
            print("‚úÖ OrderDetailsViewModel: –ù–∞–∑–≤–∏ –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ–π –≤–∂–µ —î, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ")
        }
    }
    
    private func loadCoffeeShopInfo() async {
        do {
            print("üè™ OrderDetailsViewModel: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–≤'—è—Ä–Ω—é \(order.coffeeShopId)")
            
            struct CoffeeShopInfo: Codable {
                let id: String
                let name: String
                let address: String?
            }
            
            let networkService = NetworkService.shared
            let coffeeShop: CoffeeShopInfo = try await networkService.fetch(endpoint: "/coffee-shops/\(order.coffeeShopId)")
            print("‚úÖ OrderDetailsViewModel: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–∞–≤'—è—Ä–Ω—é: \(coffeeShop.name)")
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–µ—à—ñ –±–µ–∑–ø–µ—á–Ω–æ
            await MainActor.run {
                CoffeeShopCache.shared.setCoffeeShop(coffeeShop.id, name: coffeeShop.name, address: coffeeShop.address)
            }
            
        } catch {
            print("‚ùå OrderDetailsViewModel: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–≤'—è—Ä–Ω—ñ \(order.coffeeShopId): \(error)")
        }
    }
    
    // MARK: - Computed Properties
    
    var canShowPaymentInfo: Bool {
        paymentInfo != nil || !isLoadingPayment
    }
    
    var totalItemsCount: Int {
        order.items.reduce(0) { $0 + $1.quantity }
    }
    
    var formattedTotalAmount: String {
        String(format: "%.2f ‚Ç¥", order.totalAmount)
    }
    
    // MARK: - Private Methods
    
    private func handleError(_ networkError: NetworkError) {
        switch networkError {
        case .unauthorized:
            error = "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
        case .noInternetConnection:
            error = "–ù–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è"
        case .serverError:
            error = "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        case .decodingError:
            error = "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö"
        default:
            error = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É"
        }
    }
}