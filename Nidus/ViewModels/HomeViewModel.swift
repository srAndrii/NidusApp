// ViewModels/HomeViewModel.swift
import Foundation
import Combine
import CoreLocation

class HomeViewModel: ObservableObject {
    // MARK: - –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    
    @Published var coffeeShops: [CoffeeShop] = []
    @Published var isLoading = false
    @Published var error: Error?
    @Published var currentLocation: CLLocationCoordinate2D?
    
    // MARK: - –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    
    private let coffeeShopRepository: CoffeeShopRepositoryProtocol
    private let locationManager = CLLocationManager()
    
    // MARK: - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    
    init(coffeeShopRepository: CoffeeShopRepositoryProtocol) {
        self.coffeeShopRepository = coffeeShopRepository
    }
    
    // MARK: - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞–≤'—è—Ä–Ω—è–º–∏
    
    /// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞–≤'—è—Ä–µ–Ω—å –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –∑–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    @MainActor
    func loadCoffeeShops() async {
        isLoading = true
        error = nil
        
        do {
            print("üè™ HomeViewModel: Starting to load coffee shops...")
            coffeeShops = try await coffeeShopRepository.getAllCoffeeShops()
            print("üè™ HomeViewModel: Successfully loaded \(coffeeShops.count) coffee shops")
            
            // –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –∫–∞–≤'—è—Ä–µ–Ω—å, —è–∫—â–æ –≤—ñ–¥–æ–º–æ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
            if let userLocation = currentLocation {
                for i in 0..<coffeeShops.count {
                    if let shopLocation = coffeeShops[i].coordinate {
                        let userCLLocation = CLLocation(latitude: userLocation.latitude, longitude: userLocation.longitude)
                        let shopCLLocation = CLLocation(latitude: shopLocation.latitude, longitude: shopLocation.longitude)
                        
                        // –í—ñ–¥—Å—Ç–∞–Ω—å —É –º–µ—Ç—Ä–∞—Ö
                        let distance = userCLLocation.distance(from: shopCLLocation)
                        coffeeShops[i].distance = distance
                    }
                }
                
                // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
                coffeeShops.sort { ($0.distance ?? Double.infinity) < ($1.distance ?? Double.infinity) }
            }
            
        } catch {
            self.error = error
            print("‚ùå HomeViewModel: Error loading coffee shops: \(error)")
            if let apiError = error as? APIError {
                switch apiError {
                case .unauthorized:
                    print("‚ùå HomeViewModel: Unauthorized - check if authentication is required")
                case .serverError(let statusCode, let message):
                    print("‚ùå HomeViewModel: Server error \(statusCode): \(message ?? "Unknown")")
                case .requestFailed(let underlyingError):
                    print("‚ùå HomeViewModel: Request failed: \(underlyingError)")
                default:
                    print("‚ùå HomeViewModel: Other API error: \(apiError.localizedDescription)")
                }
            }
        }
        
        isLoading = false
    }
    
    /// –ü–æ—à—É–∫ –∫–∞–≤'—è—Ä–µ–Ω—å –∑–∞ –∑–∞–ø–∏—Ç–æ–º (–∞–¥—Ä–µ—Å–æ—é)
    @MainActor
    func searchCoffeeShops(query: String) async {
        if query.isEmpty {
            await loadCoffeeShops()
            return
        }
        
        isLoading = true
        error = nil
        
        do {
            coffeeShops = try await coffeeShopRepository.searchCoffeeShops(address: query)
        } catch {
            self.error = error
            print("Error searching coffee shops: \(error)")
        }
        
        isLoading = false
    }
    
    // MARK: - –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é
    
    /// –ó–∞–ø—É—Å–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
    func startLocationUpdates() {
        locationManager.requestWhenInUseAuthorization()
        locationManager.startUpdatingLocation()
    }
    
    /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
    func updateLocation(coordinate: CLLocationCoordinate2D) {
        self.currentLocation = coordinate
    }
}
