import Foundation

class MenuItemsViewModel: ObservableObject {
    // MARK: - –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    
    @Published var menuItems: [MenuItem] = []
    @Published var isLoading = false
    @Published var error: String?
    @Published var showSuccess = false
    @Published var successMessage = ""
    
    // MARK: - –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    
    private let repository = DIContainer.shared.menuItemRepository
    private let networkService: NetworkService
    
    init(networkService: NetworkService = NetworkService.shared) {
        self.networkService = networkService
    }
    
    // MARK: - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é
    
    /// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏
    @MainActor
    func loadMenuItems(groupId: String) async {
        isLoading = true
        error = nil
        
        do {
            print("–ó–∞–ø–∏—Ç –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏: \(groupId)")
            menuItems = try await repository.getMenuItems(groupId: groupId)
            print("–û—Ç—Ä–∏–º–∞–Ω–æ \(menuItems.count) –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é")
        } catch let apiError as APIError {
            handleError(apiError)
        } catch {
            self.error = error.localizedDescription
        }
        
        isLoading = false
    }
    
    // MARK: - –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é
    
    /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
   
    private let DEFAULT_MENU_ITEM_URL = "https://res.cloudinary.com/dlbbjiuco/image/upload/v1741643259/nidus/defaults/menu-item.png"

    // –û–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç–æ–¥ createMenuItem –≤ MenuItemsViewModel.swift –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    @MainActor
    func createMenuItem(groupId: String, name: String, price: Decimal, description: String?, 
                       isAvailable: Bool, hasMultipleSizes: Bool = false,
                       ingredients: [Ingredient]? = nil, 
                       customizationOptions: [CustomizationOption]? = nil,
                       sizes: [Size]? = nil) async throws -> MenuItem {
        isLoading = true
        error = nil
        
        do {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑–∞–ø–∏—Ç—É –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            let createRequest = CreateMenuItemRequest(
                name: name,
                price: price,
                description: description,
                isAvailable: isAvailable,
                ingredients: ingredients,
                customizationOptions: nil, // –ù–∞—Ä–∞–∑—ñ backend –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–µ—Ä–µ–¥–∞—á—É customizationOptions –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
                hasMultipleSizes: hasMultipleSizes,
                sizes: sizes,
                menuGroupId: groupId  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ groupId
            )
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–Ω–∫—Ç –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
            let newItem = try await repository.createMenuItem(groupId: groupId, item: createRequest)
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
            if newItem.imageUrl == nil {
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –¥–æ–¥–∞–≤—à–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                let updates: [String: Any] = ["imageUrl": DEFAULT_MENU_ITEM_URL]
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
                let updatedItem = try await repository.updateMenuItem(groupId: groupId, itemId: newItem.id, updates: updates)
                
                // –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –¥–æ —Å–ø–∏—Å–∫—É
                menuItems.append(updatedItem)
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showSuccessMessage("–ü—É–Ω–∫—Ç –º–µ–Ω—é \"\(name)\" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
                
                isLoading = false
                return updatedItem
            } else {
                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç –¥–æ —Å–ø–∏—Å–∫—É
                menuItems.append(newItem)
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showSuccessMessage("–ü—É–Ω–∫—Ç –º–µ–Ω—é \"\(name)\" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
                
                isLoading = false
                return newItem
            }
        } catch let apiError as APIError {
            handleError(apiError)
            isLoading = false
            throw apiError
        } catch {
            self.error = error.localizedDescription
            isLoading = false
            throw error
        }
    }
    
    /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    @MainActor
    func updateMenuItem(groupId: String, itemId: String, updates: [String: Any]) async throws -> MenuItem {
        print("üîÑ MenuItemsViewModel.updateMenuItem - –ø–æ—á–∞—Ç–æ–∫")
            print("üîÑ groupId: \(groupId), itemId: \(itemId)")
            print("üîÑ updates: \(updates)")
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å customizationOptions –≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö
            if let customOptions = updates["customizationOptions"] {
                print("üîÑ customizationOptions –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ updates:")
                print("üîÑ —Ç–∏–ø: \(type(of: customOptions))")
                print("üîÑ –∑–Ω–∞—á–µ–Ω–Ω—è: \(customOptions)")
            } else {
                print("üîÑ customizationOptions –í–Ü–î–°–£–¢–ù–Ü –≤ updates!")
            }
        // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω—É –∫–æ–ø—ñ—é –æ–Ω–æ–≤–ª–µ–Ω—å –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        var safeUpdates = [String: Any]()
        
        // –ö–æ–ø—ñ—é—î–º–æ –ø—Ä–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —î, –∑ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —Ü—ñ–Ω–∏ –Ω–∞ —á–∏—Å–ª–æ
        for (key, value) in updates {
            if key == "price" {
                // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ —Ü—ñ–Ω–∏ –Ω–∞ —á–∏—Å–ª–æ
                if let priceString = value as? String, 
                   let priceValue = Double(priceString) {
                    safeUpdates[key] = priceValue
                    print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ —Ü—ñ–Ω—É –∑ —Ä—è–¥–∫–∞ '\(priceString)' –Ω–∞ —á–∏—Å–ª–æ \(priceValue)")
                } else if let priceValue = value as? Double {
                    safeUpdates[key] = priceValue
                    print("üîÑ –¶—ñ–Ω–∞ –≤–∂–µ —î —á–∏—Å–ª–æ–º (Double): \(priceValue)")
                } else if let priceValue = value as? Decimal {
                    let doubleValue = NSDecimalNumber(decimal: priceValue).doubleValue
                    safeUpdates[key] = doubleValue
                    print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ —Ü—ñ–Ω—É –∑ Decimal \(priceValue) –Ω–∞ Double \(doubleValue)")
                } else if let priceValue = value as? Int {
                    let doubleValue = Double(priceValue)
                    safeUpdates[key] = doubleValue
                    print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ —Ü—ñ–Ω—É –∑ Int \(priceValue) –Ω–∞ Double \(doubleValue)")
                } else {
                    print("‚ö†Ô∏è –£–í–ê–ì–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É: \(value) (—Ç–∏–ø: \(type(of: value)))")
                    // –°–ø—Ä–æ–±–∞ –≤–æ—Å—Ç–∞–Ω–Ω—î: –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –±—É–¥—å-—è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ä—è–¥–æ–∫, –∑–∞–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫–∏ —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —É Double
                    let stringValue = String(describing: value).replacingOccurrences(of: ",", with: ".")
                    if let doubleValue = Double(stringValue) {
                        safeUpdates[key] = doubleValue
                        print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ —Ü—ñ–Ω—É –∑ —Ä—è–¥–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è '\(value)' –Ω–∞ Double \(doubleValue)")
                    } else {
                        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–ª–µ")
                    }
                }
            } else if key != "ingredients" && key != "customizationOptions" && key != "sizes" {
                safeUpdates[key] = value
            }
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
        if let ingredients = updates["ingredients"] as? [Ingredient] {
            let safeIngredients = ingredients.map { ingredient -> [String: Any] in
                var dict: [String: Any] = [
                    "name": ingredient.name,
                    "amount": ingredient.amount, // –ß–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
                    "unit": ingredient.unit,
                    "isCustomizable": ingredient.isCustomizable
                ]
                
                // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ–ª—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ nil
                if let minAmount = ingredient.minAmount {
                    dict["minAmount"] = minAmount // –ß–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
                }
                
                if let maxAmount = ingredient.maxAmount {
                    dict["maxAmount"] = maxAmount // –ß–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
                }
                
                // –î–æ–¥–∞–Ω—ñ –Ω–æ–≤—ñ –ø–æ–ª—è freeAmount —ñ pricePerUnit
                if let freeAmount = ingredient.freeAmount {
                    dict["freeAmount"] = freeAmount // –ß–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
                }
                
                if let pricePerUnit = ingredient.pricePerUnit {
                    dict["pricePerUnit"] = pricePerUnit // –ß–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
                }
                
                return dict
            }
            
            safeUpdates["ingredients"] = safeIngredients
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–ø—Ü—ñ—ó –∫–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—ó —è–∫—â–æ –≤–æ–Ω–∏ —î
        if let customOptions = updates["customizationOptions"] as? [CustomizationOption] {
            print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è customizationOptions –∑ [CustomizationOption]")
            print("üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø—Ü—ñ–π: \(customOptions.count)")
            
            let safeOptions = customOptions.map { option -> [String: Any] in
                print("üîÑ   –û–±—Ä–æ–±–∫–∞ –æ–ø—Ü—ñ—ó: \(option.id) - \(option.name)")
                
                var optionDict: [String: Any] = [
                    "id": option.id,
                    "name": option.name,
                    "required": option.required
                ]
                
                // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤–∏–±–æ—Ä–∏
                let safeChoices = option.choices.map { choice -> [String: Any] in
                    print("üîÑ     –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É: \(choice.id) - \(choice.name)")
                    
                    var choiceDict: [String: Any] = [
                        "id": choice.id,
                        "name": choice.name
                    ]
                    
                    // –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω—É, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ nil
                    if let price = choice.price {
                        choiceDict["price"] = price // –ß–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
                        print("üîÑ       –¶—ñ–Ω–∞: \(price)")
                    } else {
                        print("üîÑ       –ë–µ–∑ —Ü—ñ–Ω–∏")
                    }
                    
                    return choiceDict
                }
                
                print("üîÑ   –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É: \(safeChoices.count)")
                optionDict["choices"] = safeChoices
                return optionDict
            }
            
            print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—ñ customizationOptions: \(safeOptions)")
            safeUpdates["customizationOptions"] = safeOptions
        }
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if let sizes = updates["sizes"] as? [Size] {
            print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è sizes –∑ [Size]")
            print("üîÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—ñ–≤: \(sizes.count)")
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –æ–±'—î–∫—Ç—ñ–≤ Size –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é
            for (i, size) in sizes.enumerated() {
                print("üîÑ   –†–æ–∑–º—ñ—Ä[\(i)]: id=\(size.id), name=\(size.name), abbreviation=\(size.abbreviation), additionalPrice=\(size.additionalPrice) (—Ç–∏–ø: \(type(of: size.additionalPrice))), isDefault=\(size.isDefault)")
            }
            
            let safeSizes = sizes.map { size -> [String: Any] in
                print("üîÑ   –û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–º—ñ—Ä—É: \(size.id) - \(size.name)")
                
                // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞–∑–º—ñ—Ä—ñ–≤
                let additionalPrice = NSDecimalNumber(decimal: size.additionalPrice).doubleValue
                print("üîÑ     additionalPrice –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ: \(size.additionalPrice) -> \(additionalPrice) (—Ç–∏–ø: \(type(of: additionalPrice)))")
                
                var sizeDict: [String: Any] = [
                    "id": size.id,
                    "name": size.name,
                    "abbreviation": size.abbreviation,
                    "additionalPrice": additionalPrice, // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ü–µ Double
                    "isDefault": size.isDefault
                ]
                
                return sizeDict
            }
            
            print("üîÑ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—ñ sizes: \(safeSizes)")
            safeUpdates["sizes"] = safeSizes
        }
        
        // –î–∞–º–ø –≤—Å—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –ø–µ—Ä–µ–¥ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
        print("üîÑ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é —Ç–∏–ø—ñ–≤:")
        for (key, value) in safeUpdates {
            print("üîÑ   \(key): \(value) (—Ç–∏–ø: \(type(of: value)))")
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞ –≤ Double –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
        let processedUpdates = ensureNumericTypes(safeUpdates)
        
        print("üîÑ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤:")
        if let dictUpdates = processedUpdates as? [String: Any] {
            for (key, value) in dictUpdates {
                print("üîÑ   \(key): \(value) (—Ç–∏–ø: \(type(of: value)))")
            }
            
            do {
                let jsonData = try JSONSerialization.data(withJSONObject: dictUpdates)
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π JSON
                if let jsonString = String(data: jsonData, encoding: .utf8) {
                    print("üîÑ –°–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π JSON (–¥–æ–≤–∂–∏–Ω–∞: \(jsonData.count) –±–∞–π—Ç):")
                    print(jsonString)
                }
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É
                let baseURL = networkService.getBaseURL()
                guard let url = URL(string: baseURL + "/menu-groups/\(groupId)/items/\(itemId)") else {
                    throw APIError.invalidURL
                }
                
                var request = URLRequest(url: url)
                request.httpMethod = "PATCH"
                request.addValue("application/json", forHTTPHeaderField: "Content-Type")
                
                if let token = UserDefaults.standard.string(forKey: "accessToken") {
                    request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
                }
                
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –Ω–∞–ø—Ä—è–º—É
                request.httpBody = jsonData
                
                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                let (data, response) = try await URLSession.shared.data(for: request)
                
                guard let httpResponse = response as? HTTPURLResponse else {
                    print("‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —î HTTPURLResponse")
                    throw APIError.invalidResponse
                }
                
                // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                print("üì° HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: \(httpResponse.statusCode)")
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üì° –¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: \(responseString)")
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
                guard (200...299).contains(httpResponse.statusCode) else {
                    print("‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: \(httpResponse.statusCode)")
                    
                    // –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    if let errorResponse = try? JSONDecoder().decode([String: String].self, from: data),
                       let errorMessage = errorResponse["message"] {
                        print("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏: \(errorMessage)")
                        throw APIError.simpleServerError(message: errorMessage)
                    } else if let errorString = String(data: data, encoding: .utf8) {
                        print("‚ùå –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: \(errorString)")
                        throw APIError.simpleServerError(message: errorString)
                    }
                    
                    throw APIError.invalidResponse
                }
                
                // –í–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if let responseString = String(data: data, encoding: .utf8) {
                    print("–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
                }
                
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–µ–∫–æ–¥–µ—Ä –∑ –Ω–∞–¥—ñ–π–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –¥–∞—Ç
                let decoder = JSONDecoder()
                decoder.dateDecodingStrategy = .custom { decoder in
                    let container = try decoder.singleValueContainer()
                    let dateStr = try container.decode(String.self)
                    
                    // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç
                    let formatters = [
                        "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
                        "yyyy-MM-dd'T'HH:mm:ssZ",
                        "yyyy-MM-dd'T'HH:mm:ss"
                    ].map { format -> DateFormatter in
                        let formatter = DateFormatter()
                        formatter.dateFormat = format
                        formatter.locale = Locale(identifier: "en_US_POSIX")
                        return formatter
                    }
                    
                    for formatter in formatters {
                        if let date = formatter.date(from: dateStr) {
                            return date
                        }
                    }
                    
                    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É: \(dateStr)")
                    return Date()
                }
                
                do {
                    return try decoder.decode(MenuItem.self, from: data)
                } catch {
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è: \(error)")
                    
                    // –Ø–∫—â–æ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
                    return try await getMenuItem(groupId: groupId, itemId: itemId)
                }
            } catch {
                print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é: \(error)")
                throw error
            }
        } else {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: processedUpdates –Ω–µ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º")
            throw NSError(domain: "MenuItemsViewModel", code: 500, userInfo: [NSLocalizedDescriptionKey: "–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö"])
        }
    }
    
    @MainActor
    func getMenuItem(groupId: String, itemId: String) async throws -> MenuItem {
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—É–Ω–∫—Ç –º–µ–Ω—é –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
        if let menuItem = menuItems.first(where: { $0.id == itemId }) {
            return menuItem
        }
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –ø—É–Ω–∫—Ç–∏ –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–∏
        await loadMenuItems(groupId: groupId)
        
        // –ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑
        if let menuItem = menuItems.first(where: { $0.id == itemId }) {
            return menuItem
        }
        
        // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î, –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
        throw NSError(domain: "MenuItemsViewModel", code: 404, userInfo: [NSLocalizedDescriptionKey: "–ü—É–Ω–∫—Ç –º–µ–Ω—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"])
    }
    
    /// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    @MainActor
    func uploadMenuItemImage(groupId: String, itemId: String, imageRequest: ImageUploadRequest) async throws {
        do {
            // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π endpoint
            let endpoint = "/upload/menu-item/\(itemId)/image"
            let uploadResponse: UploadResponse = try await networkService.uploadFile(
                endpoint: endpoint,
                data: imageRequest.imageData,
                fieldName: "file",
                fileName: imageRequest.fileName,
                mimeType: imageRequest.mimeType
            )
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é
            if let index = menuItems.firstIndex(where: { $0.id == itemId }) {
                menuItems[index].imageUrl = uploadResponse.url
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showSuccessMessage("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
        } catch {
            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            print("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: \(error)")
            self.error = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: \(error.localizedDescription)"
            throw error
        }
    }
    
    /// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    @MainActor
    func deleteMenuItem(groupId: String, itemId: String) async {
        isLoading = true
        error = nil
        
        do {
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
            try await repository.deleteMenuItem(groupId: groupId, itemId: itemId)
            
            // –í–∏–¥–∞–ª—è—î–º–æ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            menuItems.removeAll { $0.id == itemId }
            
            showSuccessMessage("–ü—É–Ω–∫—Ç –º–µ–Ω—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        } catch let apiError as APIError {
            handleError(apiError)
        } catch {
            self.error = error.localizedDescription
        }
        
        isLoading = false
    }
    
    /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
    @MainActor
    func updateMenuItemAvailability(groupId: String, itemId: String, available: Bool) async {
        do {
            print("–û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –¥–ª—è \(itemId) –Ω–∞ \(available)")
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            if let index = menuItems.firstIndex(where: { $0.id == itemId }) {
                menuItems[index].isAvailable = available
            }
            
            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ø–æ–º–∏–ª–∫—É
            self.error = nil
            
            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            let updatedItem = try await repository.updateMenuItem(
                groupId: groupId,
                itemId: itemId,
                updates: ["isAvailable": available]
            )
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∑ –¥–∞–Ω–∏–º–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
            if let index = menuItems.firstIndex(where: { $0.id == itemId }) {
                menuItems[index] = updatedItem
            }
            
            showSuccessMessage("–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø—É–Ω–∫—Ç—É –º–µ–Ω—é –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        } catch {
            print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ: \(error)")
            self.error = "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: \(error.localizedDescription)"
            
            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö, —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            await loadMenuItems(groupId: groupId)
        }
    }
    
    // MARK: - –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    
    /// –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
    func showSuccessMessage(_ message: String) {
        successMessage = message
        showSuccess = true
    }
    
    /// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API
    private func handleError(_ apiError: APIError) {
        switch apiError {
        case .serverError(statusCode: _, message: let message):
            self.error = message ?? "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        case .simpleServerError(message: let message):
            self.error = message
        case .unauthorized:
            self.error = "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó"
        default:
            self.error = apiError.localizedDescription
        }
    }
    
    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –≤—Å—ñ String —Ç–∞ NSNumber —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É Double
    /// —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º —ñ–∑ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
    private func ensureNumericTypes(_ value: Any) -> Any {
        if let value = value as? String {
            // –î–ª—è —Ä—è–¥–∫—ñ–≤, —Å–ø—Ä–æ–±—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ Double
            // –ó–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —á–∏—Å–µ–ª
            let stringValue = value.replacingOccurrences(of: ",", with: ".")
            if let doubleValue = Double(stringValue) {
                print("üîÄ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ String -> Double: \(value) -> \(doubleValue)")
                return doubleValue
            } else {
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ String –≤ Double: \(value) (—Ç–∏–ø: \(type(of: value)))")
            }
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ original value —è–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
            return value
        } else if let decimalValue = value as? Decimal {
            let doubleValue = NSDecimalNumber(decimal: decimalValue).doubleValue
            print("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è: Decimal \(decimalValue) -> Double \(doubleValue)")
            return doubleValue
        } else if let intValue = value as? Int {
            let doubleValue = Double(intValue)
            print("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è: Int \(intValue) -> Double \(doubleValue)")
            return doubleValue
        } else if let dict = value as? [String: Any] {
            var result = [String: Any]()
            for (key, dictValue) in dict {
                result[key] = ensureNumericTypes(dictValue)
            }
            return result
        } else if let array = value as? [Any] {
            return array.map { ensureNumericTypes($0) }
        }
        return value
    }
}
